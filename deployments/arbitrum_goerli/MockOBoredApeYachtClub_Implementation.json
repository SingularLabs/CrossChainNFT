{
  "address": "0x58823d0b2E3f08DdEF2A80df486D5d870603e2D5",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_hashedPayload",
          "type": "bytes32"
        }
      ],
      "name": "CreditCleared",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_hashedPayload",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "CreditStored",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_reason",
          "type": "bytes"
        }
      ],
      "name": "MessageFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_toAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "ReceiveFromChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        }
      ],
      "name": "RetryMessageSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "SendToChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_dstChainIdToBatchLimit",
          "type": "uint256"
        }
      ],
      "name": "SetDstChainIdToBatchLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_dstChainIdToTransferGas",
          "type": "uint256"
        }
      ],
      "name": "SetDstChainIdToTransferGas",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_type",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_minDstGas",
          "type": "uint256"
        }
      ],
      "name": "SetMinDstGas",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_minGasToTransferAndStore",
          "type": "uint256"
        }
      ],
      "name": "SetMinGasToTransferAndStore",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "precrime",
          "type": "address"
        }
      ],
      "name": "SetPrecrime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        }
      ],
      "name": "SetTrustedRemote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_remoteAddress",
          "type": "bytes"
        }
      ],
      "name": "SetTrustedRemoteAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_PAYLOAD_SIZE_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FUNCTION_TYPE_SEND",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minGasToTransfer",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_lzEndpoint",
          "type": "address"
        }
      ],
      "name": "__CustomONFT721Base_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint16",
          "name": "targetChain",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "adapterParams",
          "type": "bytes"
        }
      ],
      "name": "batchCrossTo",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "clearCredits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "targetChain",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "adapterParams",
          "type": "bytes"
        }
      ],
      "name": "crossTo",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "dstChainIdToBatchLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "dstChainIdToTransferGas",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "_useZro",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "estimateSendBatchFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nativeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "zroFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_useZro",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "estimateSendFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nativeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "zroFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "failedMessages",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "forceResumeReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        }
      ],
      "name": "getConfig",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        }
      ],
      "name": "getTrustedRemoteAddress",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lzEndpoint",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "isTrustedRemote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lzEndpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpoint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "minDstGasLookup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minGasToTransferAndStore",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "nonblockingLzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "payloadSizeLimitLookup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "precrime",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "rawOwnerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "retryMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address payable",
          "name": "_refundAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zroPaymentAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "sendBatchFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_refundAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zroPaymentAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "sendFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_config",
          "type": "bytes"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_dstChainIdToBatchLimit",
          "type": "uint256"
        }
      ],
      "name": "setDstChainIdToBatchLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_dstChainIdToTransferGas",
          "type": "uint256"
        }
      ],
      "name": "setDstChainIdToTransferGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_packetType",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_minGas",
          "type": "uint256"
        }
      ],
      "name": "setMinDstGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minGasToTransferAndStore",
          "type": "uint256"
        }
      ],
      "name": "setMinGasToTransferAndStore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        }
      ],
      "name": "setPayloadSizeLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_precrime",
          "type": "address"
        }
      ],
      "name": "setPrecrime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        }
      ],
      "name": "setReceiveVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        }
      ],
      "name": "setSendVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        }
      ],
      "name": "setTrustedRemote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_remoteAddress",
          "type": "bytes"
        }
      ],
      "name": "setTrustedRemoteAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "storedCredits",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "creditsRemain",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "trustedRemoteLookup",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9a2ef7da83c3ab47e71d11938c721567f1884edb60aca4cd48053fe17e36ce23",
  "receipt": {
    "to": null,
    "from": "0x4C77F966Da53B6fFeBD9e661F669b6E6C42D455e",
    "contractAddress": "0x58823d0b2E3f08DdEF2A80df486D5d870603e2D5",
    "transactionIndex": 1,
    "gasUsed": "4577266",
    "logsBloom": "0x
    "blockHash": "0xb66b46e9fcb7066d3804ba12383f5bfb67f62741ea58e5288154aca1b445cf20",
    "transactionHash": "0x9a2ef7da83c3ab47e71d11938c721567f1884edb60aca4cd48053fe17e36ce23",
    "logs": [],
    "blockNumber": 59656013,
    "cumulativeGasUsed": "4577266",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "5a2b651d17d9719ddb8405c6e21017b3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_hashedPayload\",\"type\":\"bytes32\"}],\"name\":\"CreditCleared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_hashedPayload\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"CreditStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_reason\",\"type\":\"bytes\"}],\"name\":\"MessageFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"ReceiveFromChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"}],\"name\":\"RetryMessageSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"SendToChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_dstChainIdToBatchLimit\",\"type\":\"uint256\"}],\"name\":\"SetDstChainIdToBatchLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_dstChainIdToTransferGas\",\"type\":\"uint256\"}],\"name\":\"SetDstChainIdToTransferGas\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_type\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minDstGas\",\"type\":\"uint256\"}],\"name\":\"SetMinDstGas\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minGasToTransferAndStore\",\"type\":\"uint256\"}],\"name\":\"SetMinGasToTransferAndStore\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"precrime\",\"type\":\"address\"}],\"name\":\"SetPrecrime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_remoteAddress\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemoteAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_PAYLOAD_SIZE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FUNCTION_TYPE_SEND\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minGasToTransfer\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lzEndpoint\",\"type\":\"address\"}],\"name\":\"__CustomONFT721Base_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"adapterParams\",\"type\":\"bytes\"}],\"name\":\"batchCrossTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"clearCredits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"adapterParams\",\"type\":\"bytes\"}],\"name\":\"crossTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"dstChainIdToBatchLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"dstChainIdToTransferGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_useZro\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"estimateSendBatchFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zroFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_useZro\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"estimateSendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zroFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"failedMessages\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"forceResumeReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"}],\"name\":\"getTrustedRemoteAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lzEndpoint\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"isTrustedRemote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lzEndpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"minDstGasLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minGasToTransferAndStore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"nonblockingLzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"payloadSizeLimitLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precrime\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"rawOwnerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"retryMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address payable\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"sendBatchFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"sendFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_config\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_dstChainIdToBatchLimit\",\"type\":\"uint256\"}],\"name\":\"setDstChainIdToBatchLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_dstChainIdToTransferGas\",\"type\":\"uint256\"}],\"name\":\"setDstChainIdToTransferGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_packetType\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_minGas\",\"type\":\"uint256\"}],\"name\":\"setMinDstGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minGasToTransferAndStore\",\"type\":\"uint256\"}],\"name\":\"setMinGasToTransferAndStore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"setPayloadSizeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_precrime\",\"type\":\"address\"}],\"name\":\"setPrecrime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setReceiveVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setSendVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_remoteAddress\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemoteAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"storedCredits\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"creditsRemain\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"trustedRemoteLookup\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"estimateSendBatchFee(uint16,bytes,uint256[],bool,bytes)\":{\"details\":\"estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`) _dstChainId - L0 defined chain id to send tokens too _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain _tokenIds[] - token Ids to transfer _useZro - indicates to use zro to pay L0 fees _adapterParams - flexible bytes array to indicate messaging adapter services in L0\"},\"estimateSendFee(uint16,bytes,uint256,bool,bytes)\":{\"details\":\"estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`) _dstChainId - L0 defined chain id to send tokens too _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain _tokenId - token Id to transfer _useZro - indicates to use zro to pay L0 fees _adapterParams - flexible bytes array to indicate messaging adapter services in L0\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"sendBatchFrom(address,uint16,bytes,uint256[],address,address,bytes)\":{\"details\":\"send tokens `_tokenIds[]` to (`_dstChainId`, `_toAddress`) from `_from` `_toAddress` can be any size depending on the `dstChainId`. `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token) `_adapterParams` is a flexible bytes array to indicate messaging adapter services\"},\"sendFrom(address,uint16,bytes,uint256,address,address,bytes)\":{\"details\":\"send token `_tokenId` to (`_dstChainId`, `_toAddress`) from `_from` `_toAddress` can be any size depending on the `dstChainId`. `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token) `_adapterParams` is a flexible bytes array to indicate messaging adapter services\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/MockOBoredApeYachtClub.sol\":\"MockOBoredApeYachtClub\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2025ccf05f6f1f2fd4e078e552836f525a1864e3854ed555047cd732320ab29b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0xd6e2dc520133229f192493fc0a53c0cfb0cbcee1e45bf0817c34e416486d9359\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xbe63437e37e32162d5d11ea8f11a44378c092b4bcbb05b51a813fe4bf33297d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721ReceiverUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721HolderUpgradeable is Initializable, IERC721ReceiverUpgradeable {\\n    function __ERC721Holder_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Holder_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x3d2985d895c38e203497fb9f771c447a946264ebfd36d05ee27e9c9e9ba6e03a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xd90d7723512df65ae417adaf0801042940f0dabd60039ceeaffe34aa5b238da1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/libs/CustomONFT721Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./layerzero/token/onft721/ONFT721Base.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\ncontract CustomONFT721Base is ONFT721Base, ERC721HolderUpgradeable {\\r\\n    address public collateral;\\r\\n\\r\\n    function __CustomONFT721Base_init(\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        address _collateral,\\r\\n        uint _minGasToTransfer,\\r\\n        address _lzEndpoint\\r\\n    ) public initializer {\\r\\n        __ONFT721Base_init(_name, _symbol, _minGasToTransfer, _lzEndpoint);\\r\\n        collateral = _collateral;\\r\\n    }\\r\\n\\r\\n    function rawOwnerOf(uint tokenId) public view returns (address) {\\r\\n        if (_exists(tokenId)) {\\r\\n            return ownerOf(tokenId);\\r\\n        }\\r\\n        return address(0);\\r\\n    }\\r\\n\\r\\n    function batchCrossTo(\\r\\n        uint[] calldata tokenIds,\\r\\n        uint16 targetChain,\\r\\n        bytes calldata adapterParams\\r\\n    ) public payable virtual {\\r\\n        bytes memory addr = abi.encodePacked(_msgSender());\\r\\n        sendBatchFrom(_msgSender(), targetChain, addr, tokenIds, payable(_msgSender()), address(0), adapterParams);\\r\\n    }\\r\\n\\r\\n    function crossTo(uint tokenId, uint16 targetChain, bytes calldata adapterParams) public payable virtual {\\r\\n        bytes memory addr = abi.encodePacked(_msgSender());\\r\\n        sendFrom(_msgSender(), targetChain, addr, tokenId, payable(_msgSender()), address(0), adapterParams);\\r\\n    }\\r\\n\\r\\n    function _debitFrom(address _from, uint16 _chain, bytes memory _payload, uint _tokenId) internal virtual override {\\r\\n        if (collateral != address(0)) {\\r\\n            IERC721 token = IERC721(collateral);\\r\\n            token.safeTransferFrom(_msgSender(), address(this), _tokenId);\\r\\n            if (!_exists(_tokenId)) {\\r\\n                _safeMint(address(this), _tokenId);\\r\\n            } else {\\r\\n                require(ownerOf(_tokenId) == address(this));\\r\\n            }\\r\\n        } else super._debitFrom(_from, _chain, _payload, _tokenId);\\r\\n    }\\r\\n\\r\\n    function _creditTo(uint16 _chain, address _toAddress, uint _tokenId) internal virtual override {\\r\\n        if (collateral != address(0)) {\\r\\n            IERC721 token = IERC721(collateral);\\r\\n            require(token.ownerOf(_tokenId) == address(this), \\\"collateral err\\\");\\r\\n            require(ownerOf(_tokenId) == address(this));\\r\\n            token.safeTransferFrom(address(this), _toAddress, _tokenId);\\r\\n        } else {\\r\\n            super._creditTo(_chain, _toAddress, _tokenId);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x688caacdf5abac1b73cfaa65b88c0334f6a7c3ee2468c27f8dca46baedeab269\",\"license\":\"MIT\"},\"contracts/libs/layerzero/libraries/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\r\\n/*\\r\\n * @title Solidity Bytes Arrays Utils\\r\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\r\\n *\\r\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\r\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\r\\n */\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nlibrary BytesLib {\\r\\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\\r\\n        bytes memory tempBytes;\\r\\n\\r\\n        assembly {\\r\\n            // Get a location of some free memory and store it in tempBytes as\\r\\n            // Solidity does for memory variables.\\r\\n            tempBytes := mload(0x40)\\r\\n\\r\\n            // Store the length of the first bytes array at the beginning of\\r\\n            // the memory for tempBytes.\\r\\n            let length := mload(_preBytes)\\r\\n            mstore(tempBytes, length)\\r\\n\\r\\n            // Maintain a memory counter for the current write location in the\\r\\n            // temp bytes array by adding the 32 bytes for the array length to\\r\\n            // the starting location.\\r\\n            let mc := add(tempBytes, 0x20)\\r\\n            // Stop copying when the memory counter reaches the length of the\\r\\n            // first bytes array.\\r\\n            let end := add(mc, length)\\r\\n\\r\\n            for {\\r\\n                // Initialize a copy counter to the start of the _preBytes data,\\r\\n                // 32 bytes into its memory.\\r\\n                let cc := add(_preBytes, 0x20)\\r\\n            } lt(mc, end) {\\r\\n                // Increase both counters by 32 bytes each iteration.\\r\\n                mc := add(mc, 0x20)\\r\\n                cc := add(cc, 0x20)\\r\\n            } {\\r\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\r\\n                // at a time.\\r\\n                mstore(mc, mload(cc))\\r\\n            }\\r\\n\\r\\n            // Add the length of _postBytes to the current length of tempBytes\\r\\n            // and store it as the new length in the first 32 bytes of the\\r\\n            // tempBytes memory.\\r\\n            length := mload(_postBytes)\\r\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\r\\n\\r\\n            // Move the memory counter back from a multiple of 0x20 to the\\r\\n            // actual end of the _preBytes data.\\r\\n            mc := end\\r\\n            // Stop copying when the memory counter reaches the new combined\\r\\n            // length of the arrays.\\r\\n            end := add(mc, length)\\r\\n\\r\\n            for {\\r\\n                let cc := add(_postBytes, 0x20)\\r\\n            } lt(mc, end) {\\r\\n                mc := add(mc, 0x20)\\r\\n                cc := add(cc, 0x20)\\r\\n            } {\\r\\n                mstore(mc, mload(cc))\\r\\n            }\\r\\n\\r\\n            // Update the free-memory pointer by padding our last write location\\r\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\r\\n            // next 32 byte block, then round down to the nearest multiple of\\r\\n            // 32. If the sum of the length of the two arrays is zero then add\\r\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\r\\n            mstore(\\r\\n                0x40,\\r\\n                and(\\r\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\r\\n                    not(31) // Round down to the nearest 32 bytes.\\r\\n                )\\r\\n            )\\r\\n        }\\r\\n\\r\\n        return tempBytes;\\r\\n    }\\r\\n\\r\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\r\\n        assembly {\\r\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\r\\n            // of the array. (We don't need to use the offset into the slot\\r\\n            // because arrays use the entire slot.)\\r\\n            let fslot := sload(_preBytes.slot)\\r\\n            // Arrays of 31 bytes or less have an even value in their slot,\\r\\n            // while longer arrays have an odd value. The actual length is\\r\\n            // the slot divided by two for odd values, and the lowest order\\r\\n            // byte divided by two for even values.\\r\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\r\\n            // two to get the length. If the slot is odd, bitwise and the slot\\r\\n            // with -1 and divide by two.\\r\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\r\\n            let mlength := mload(_postBytes)\\r\\n            let newlength := add(slength, mlength)\\r\\n            // slength can contain both the length and contents of the array\\r\\n            // if length < 32 bytes so let's prepare for that\\r\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\r\\n            switch add(lt(slength, 32), lt(newlength, 32))\\r\\n            case 2 {\\r\\n                // Since the new array still fits in the slot, we just need to\\r\\n                // update the contents of the slot.\\r\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\r\\n                sstore(\\r\\n                    _preBytes.slot,\\r\\n                    // all the modifications to the slot are inside this\\r\\n                    // next block\\r\\n                    add(\\r\\n                        // we can just add to the slot contents because the\\r\\n                        // bytes we want to change are the LSBs\\r\\n                        fslot,\\r\\n                        add(\\r\\n                            mul(\\r\\n                                div(\\r\\n                                    // load the bytes from memory\\r\\n                                    mload(add(_postBytes, 0x20)),\\r\\n                                    // zero all bytes to the right\\r\\n                                    exp(0x100, sub(32, mlength))\\r\\n                                ),\\r\\n                                // and now shift left the number of bytes to\\r\\n                                // leave space for the length in the slot\\r\\n                                exp(0x100, sub(32, newlength))\\r\\n                            ),\\r\\n                            // increase length by the double of the memory\\r\\n                            // bytes length\\r\\n                            mul(mlength, 2)\\r\\n                        )\\r\\n                    )\\r\\n                )\\r\\n            }\\r\\n            case 1 {\\r\\n                // The stored value fits in the slot, but the combined value\\r\\n                // will exceed it.\\r\\n                // get the keccak hash to get the contents of the array\\r\\n                mstore(0x0, _preBytes.slot)\\r\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\r\\n\\r\\n                // save new length\\r\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\r\\n\\r\\n                // The contents of the _postBytes array start 32 bytes into\\r\\n                // the structure. Our first read should obtain the `submod`\\r\\n                // bytes that can fit into the unused space in the last word\\r\\n                // of the stored array. To get this, we read 32 bytes starting\\r\\n                // from `submod`, so the data we read overlaps with the array\\r\\n                // contents by `submod` bytes. Masking the lowest-order\\r\\n                // `submod` bytes allows us to add that value directly to the\\r\\n                // stored value.\\r\\n\\r\\n                let submod := sub(32, slength)\\r\\n                let mc := add(_postBytes, submod)\\r\\n                let end := add(_postBytes, mlength)\\r\\n                let mask := sub(exp(0x100, submod), 1)\\r\\n\\r\\n                sstore(\\r\\n                    sc,\\r\\n                    add(\\r\\n                        and(fslot, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00),\\r\\n                        and(mload(mc), mask)\\r\\n                    )\\r\\n                )\\r\\n\\r\\n                for {\\r\\n                    mc := add(mc, 0x20)\\r\\n                    sc := add(sc, 1)\\r\\n                } lt(mc, end) {\\r\\n                    sc := add(sc, 1)\\r\\n                    mc := add(mc, 0x20)\\r\\n                } {\\r\\n                    sstore(sc, mload(mc))\\r\\n                }\\r\\n\\r\\n                mask := exp(0x100, sub(mc, end))\\r\\n\\r\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\r\\n            }\\r\\n            default {\\r\\n                // get the keccak hash to get the contents of the array\\r\\n                mstore(0x0, _preBytes.slot)\\r\\n                // Start copying to the last used word of the stored array.\\r\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\r\\n\\r\\n                // save new length\\r\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\r\\n\\r\\n                // Copy over the first `submod` bytes of the new data as in\\r\\n                // case 1 above.\\r\\n                let slengthmod := mod(slength, 32)\\r\\n                let mlengthmod := mod(mlength, 32)\\r\\n                let submod := sub(32, slengthmod)\\r\\n                let mc := add(_postBytes, submod)\\r\\n                let end := add(_postBytes, mlength)\\r\\n                let mask := sub(exp(0x100, submod), 1)\\r\\n\\r\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\r\\n\\r\\n                for {\\r\\n                    sc := add(sc, 1)\\r\\n                    mc := add(mc, 0x20)\\r\\n                } lt(mc, end) {\\r\\n                    sc := add(sc, 1)\\r\\n                    mc := add(mc, 0x20)\\r\\n                } {\\r\\n                    sstore(sc, mload(mc))\\r\\n                }\\r\\n\\r\\n                mask := exp(0x100, sub(mc, end))\\r\\n\\r\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function slice(bytes memory _bytes, uint _start, uint _length) internal pure returns (bytes memory) {\\r\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\r\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\r\\n\\r\\n        bytes memory tempBytes;\\r\\n\\r\\n        assembly {\\r\\n            switch iszero(_length)\\r\\n            case 0 {\\r\\n                // Get a location of some free memory and store it in tempBytes as\\r\\n                // Solidity does for memory variables.\\r\\n                tempBytes := mload(0x40)\\r\\n\\r\\n                // The first word of the slice result is potentially a partial\\r\\n                // word read from the original array. To read it, we calculate\\r\\n                // the length of that partial word and start copying that many\\r\\n                // bytes into the array. The first word we copy will start with\\r\\n                // data we don't care about, but the last `lengthmod` bytes will\\r\\n                // land at the beginning of the contents of the new array. When\\r\\n                // we're done copying, we overwrite the full first word with\\r\\n                // the actual length of the slice.\\r\\n                let lengthmod := and(_length, 31)\\r\\n\\r\\n                // The multiplication in the next line is necessary\\r\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\r\\n                // the following copy loop was copying the origin's length\\r\\n                // and then ending prematurely not copying everything it should.\\r\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\r\\n                let end := add(mc, _length)\\r\\n\\r\\n                for {\\r\\n                    // The multiplication in the next line has the same exact purpose\\r\\n                    // as the one above.\\r\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\r\\n                } lt(mc, end) {\\r\\n                    mc := add(mc, 0x20)\\r\\n                    cc := add(cc, 0x20)\\r\\n                } {\\r\\n                    mstore(mc, mload(cc))\\r\\n                }\\r\\n\\r\\n                mstore(tempBytes, _length)\\r\\n\\r\\n                //update free-memory pointer\\r\\n                //allocating the array padded to 32 bytes like the compiler does now\\r\\n                mstore(0x40, and(add(mc, 31), not(31)))\\r\\n            }\\r\\n            //if we want a zero-length slice let's just return a zero-length array\\r\\n            default {\\r\\n                tempBytes := mload(0x40)\\r\\n                //zero out the 32 bytes slice we are about to return\\r\\n                //we need to do it because Solidity does not garbage collect\\r\\n                mstore(tempBytes, 0)\\r\\n\\r\\n                mstore(0x40, add(tempBytes, 0x20))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return tempBytes;\\r\\n    }\\r\\n\\r\\n    function toAddress(bytes memory _bytes, uint _start) internal pure returns (address) {\\r\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\r\\n        address tempAddress;\\r\\n\\r\\n        assembly {\\r\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\r\\n        }\\r\\n\\r\\n        return tempAddress;\\r\\n    }\\r\\n\\r\\n    function toUint8(bytes memory _bytes, uint _start) internal pure returns (uint8) {\\r\\n        require(_bytes.length >= _start + 1, \\\"toUint8_outOfBounds\\\");\\r\\n        uint8 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint16(bytes memory _bytes, uint _start) internal pure returns (uint16) {\\r\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\r\\n        uint16 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint32(bytes memory _bytes, uint _start) internal pure returns (uint32) {\\r\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\r\\n        uint32 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint64(bytes memory _bytes, uint _start) internal pure returns (uint64) {\\r\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\r\\n        uint64 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint96(bytes memory _bytes, uint _start) internal pure returns (uint96) {\\r\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\r\\n        uint96 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint128(bytes memory _bytes, uint _start) internal pure returns (uint128) {\\r\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\r\\n        uint128 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint256(bytes memory _bytes, uint _start) internal pure returns (uint) {\\r\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\r\\n        uint tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toBytes32(bytes memory _bytes, uint _start) internal pure returns (bytes32) {\\r\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\r\\n        bytes32 tempBytes32;\\r\\n\\r\\n        assembly {\\r\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\r\\n        }\\r\\n\\r\\n        return tempBytes32;\\r\\n    }\\r\\n\\r\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\r\\n        bool success = true;\\r\\n\\r\\n        assembly {\\r\\n            let length := mload(_preBytes)\\r\\n\\r\\n            // if lengths don't match the arrays are not equal\\r\\n            switch eq(length, mload(_postBytes))\\r\\n            case 1 {\\r\\n                // cb is a circuit breaker in the for loop since there's\\r\\n                //  no said feature for inline assembly loops\\r\\n                // cb = 1 - don't breaker\\r\\n                // cb = 0 - break\\r\\n                let cb := 1\\r\\n\\r\\n                let mc := add(_preBytes, 0x20)\\r\\n                let end := add(mc, length)\\r\\n\\r\\n                for {\\r\\n                    let cc := add(_postBytes, 0x20)\\r\\n                    // the next line is the loop condition:\\r\\n                    // while(uint256(mc < end) + cb == 2)\\r\\n                } eq(add(lt(mc, end), cb), 2) {\\r\\n                    mc := add(mc, 0x20)\\r\\n                    cc := add(cc, 0x20)\\r\\n                } {\\r\\n                    // if any of these checks fails then arrays are not equal\\r\\n                    if iszero(eq(mload(mc), mload(cc))) {\\r\\n                        // unsuccess:\\r\\n                        success := 0\\r\\n                        cb := 0\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            default {\\r\\n                // unsuccess:\\r\\n                success := 0\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return success;\\r\\n    }\\r\\n\\r\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\\r\\n        bool success = true;\\r\\n\\r\\n        assembly {\\r\\n            // we know _preBytes_offset is 0\\r\\n            let fslot := sload(_preBytes.slot)\\r\\n            // Decode the length of the stored array like in concatStorage().\\r\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\r\\n            let mlength := mload(_postBytes)\\r\\n\\r\\n            // if lengths don't match the arrays are not equal\\r\\n            switch eq(slength, mlength)\\r\\n            case 1 {\\r\\n                // slength can contain both the length and contents of the array\\r\\n                // if length < 32 bytes so let's prepare for that\\r\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\r\\n                if iszero(iszero(slength)) {\\r\\n                    switch lt(slength, 32)\\r\\n                    case 1 {\\r\\n                        // blank the last byte which is the length\\r\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\r\\n\\r\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\r\\n                            // unsuccess:\\r\\n                            success := 0\\r\\n                        }\\r\\n                    }\\r\\n                    default {\\r\\n                        // cb is a circuit breaker in the for loop since there's\\r\\n                        //  no said feature for inline assembly loops\\r\\n                        // cb = 1 - don't breaker\\r\\n                        // cb = 0 - break\\r\\n                        let cb := 1\\r\\n\\r\\n                        // get the keccak hash to get the contents of the array\\r\\n                        mstore(0x0, _preBytes.slot)\\r\\n                        let sc := keccak256(0x0, 0x20)\\r\\n\\r\\n                        let mc := add(_postBytes, 0x20)\\r\\n                        let end := add(mc, mlength)\\r\\n\\r\\n                        // the next line is the loop condition:\\r\\n                        // while(uint256(mc < end) + cb == 2)\\r\\n                        for {\\r\\n\\r\\n                        } eq(add(lt(mc, end), cb), 2) {\\r\\n                            sc := add(sc, 1)\\r\\n                            mc := add(mc, 0x20)\\r\\n                        } {\\r\\n                            if iszero(eq(sload(sc), mload(mc))) {\\r\\n                                // unsuccess:\\r\\n                                success := 0\\r\\n                                cb := 0\\r\\n                            }\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            default {\\r\\n                // unsuccess:\\r\\n                success := 0\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return success;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x194ff6bb9fdbb01756494e5f7f130eb3c0fee3da731602c7b86cd84fdf903832\",\"license\":\"Unlicense\"},\"contracts/libs/layerzero/libraries/ExcessivelySafeCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\r\\npragma solidity >=0.7.6;\\r\\n\\r\\nlibrary ExcessivelySafeCall {\\r\\n    uint constant LOW_28_MASK = 0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\r\\n\\r\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\r\\n    /// contract. This prevents the called contract from causing reversion of\\r\\n    /// the caller in as many ways as we can.\\r\\n    /// @dev The main difference between this and a solidity low-level call is\\r\\n    /// that we limit the number of bytes that the callee can cause to be\\r\\n    /// copied to caller memory. This prevents stupid things like malicious\\r\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\r\\n    /// to memory.\\r\\n    /// @param _target The address to call\\r\\n    /// @param _gas The amount of gas to forward to the remote contract\\r\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\r\\n    /// to memory.\\r\\n    /// @param _calldata The data to send to the remote contract\\r\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\r\\n    /// `_maxCopy` bytes.\\r\\n    function excessivelySafeCall(\\r\\n        address _target,\\r\\n        uint _gas,\\r\\n        uint16 _maxCopy,\\r\\n        bytes memory _calldata\\r\\n    ) internal returns (bool, bytes memory) {\\r\\n        // set up for assembly call\\r\\n        uint _toCopy;\\r\\n        bool _success;\\r\\n        bytes memory _returnData = new bytes(_maxCopy);\\r\\n        // dispatch message to recipient\\r\\n        // by assembly calling \\\"handle\\\" function\\r\\n        // we call via assembly to avoid memcopying a very large returndata\\r\\n        // returned by a malicious contract\\r\\n        assembly {\\r\\n            _success := call(\\r\\n                _gas, // gas\\r\\n                _target, // recipient\\r\\n                0, // ether value\\r\\n                add(_calldata, 0x20), // inloc\\r\\n                mload(_calldata), // inlen\\r\\n                0, // outloc\\r\\n                0 // outlen\\r\\n            )\\r\\n            // limit our copy to 256 bytes\\r\\n            _toCopy := returndatasize()\\r\\n            if gt(_toCopy, _maxCopy) {\\r\\n                _toCopy := _maxCopy\\r\\n            }\\r\\n            // Store the length of the copied bytes\\r\\n            mstore(_returnData, _toCopy)\\r\\n            // copy the bytes from returndata[0:_toCopy]\\r\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\r\\n        }\\r\\n        return (_success, _returnData);\\r\\n    }\\r\\n\\r\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\r\\n    /// contract. This prevents the called contract from causing reversion of\\r\\n    /// the caller in as many ways as we can.\\r\\n    /// @dev The main difference between this and a solidity low-level call is\\r\\n    /// that we limit the number of bytes that the callee can cause to be\\r\\n    /// copied to caller memory. This prevents stupid things like malicious\\r\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\r\\n    /// to memory.\\r\\n    /// @param _target The address to call\\r\\n    /// @param _gas The amount of gas to forward to the remote contract\\r\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\r\\n    /// to memory.\\r\\n    /// @param _calldata The data to send to the remote contract\\r\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\r\\n    /// `_maxCopy` bytes.\\r\\n    function excessivelySafeStaticCall(\\r\\n        address _target,\\r\\n        uint _gas,\\r\\n        uint16 _maxCopy,\\r\\n        bytes memory _calldata\\r\\n    ) internal view returns (bool, bytes memory) {\\r\\n        // set up for assembly call\\r\\n        uint _toCopy;\\r\\n        bool _success;\\r\\n        bytes memory _returnData = new bytes(_maxCopy);\\r\\n        // dispatch message to recipient\\r\\n        // by assembly calling \\\"handle\\\" function\\r\\n        // we call via assembly to avoid memcopying a very large returndata\\r\\n        // returned by a malicious contract\\r\\n        assembly {\\r\\n            _success := staticcall(\\r\\n                _gas, // gas\\r\\n                _target, // recipient\\r\\n                add(_calldata, 0x20), // inloc\\r\\n                mload(_calldata), // inlen\\r\\n                0, // outloc\\r\\n                0 // outlen\\r\\n            )\\r\\n            // limit our copy to 256 bytes\\r\\n            _toCopy := returndatasize()\\r\\n            if gt(_toCopy, _maxCopy) {\\r\\n                _toCopy := _maxCopy\\r\\n            }\\r\\n            // Store the length of the copied bytes\\r\\n            mstore(_returnData, _toCopy)\\r\\n            // copy the bytes from returndata[0:_toCopy]\\r\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\r\\n        }\\r\\n        return (_success, _returnData);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Swaps function selectors in encoded contract calls\\r\\n     * @dev Allows reuse of encoded calldata for functions with identical\\r\\n     * argument types but different names. It simply swaps out the first 4 bytes\\r\\n     * for the new selector. This function modifies memory in place, and should\\r\\n     * only be used with caution.\\r\\n     * @param _newSelector The new 4-byte selector\\r\\n     * @param _buf The encoded contract args\\r\\n     */\\r\\n    function swapSelector(bytes4 _newSelector, bytes memory _buf) internal pure {\\r\\n        require(_buf.length >= 4);\\r\\n        uint _mask = LOW_28_MASK;\\r\\n        assembly {\\r\\n            // load the first word of\\r\\n            let _word := mload(add(_buf, 0x20))\\r\\n            // mask out the top 4 bytes\\r\\n            // /x\\r\\n            _word := and(_word, _mask)\\r\\n            _word := or(_newSelector, _word)\\r\\n            mstore(add(_buf, 0x20), _word)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7c99d40e0c339d5db9548b42b7a6c5e7626fe87357735a086c1989266ca46365\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/libs/layerzero/lzApp/LzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n//import \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./interfaces/ILayerZeroReceiver.sol\\\";\\r\\nimport \\\"./interfaces/ILayerZeroUserApplicationConfig.sol\\\";\\r\\nimport \\\"./interfaces/ILayerZeroEndpoint.sol\\\";\\r\\nimport \\\"../libraries/BytesLib.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\n/*\\r\\n * a generic LzReceiver implementation\\r\\n */\\r\\nabstract contract LzApp is OwnableUpgradeable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\\r\\n    using BytesLib for bytes;\\r\\n\\r\\n    // ua can not send payload larger than this by default, but it can be changed by the ua owner\\r\\n    uint public constant DEFAULT_PAYLOAD_SIZE_LIMIT = 10000;\\r\\n\\r\\n    //ILayerZeroEndpoint public immutable lzEndpoint;\\r\\n    ILayerZeroEndpoint public lzEndpoint;\\r\\n    mapping(uint16 => bytes) public trustedRemoteLookup;\\r\\n    mapping(uint16 => mapping(uint16 => uint)) public minDstGasLookup;\\r\\n    mapping(uint16 => uint) public payloadSizeLimitLookup;\\r\\n    address public precrime;\\r\\n\\r\\n    event SetPrecrime(address precrime);\\r\\n    event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\\r\\n    event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\\r\\n    event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint _minDstGas);\\r\\n\\r\\n    /*\\r\\n    constructor(address _endpoint) {\\r\\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\\r\\n    }\\r\\n    */\\r\\n    function __LzApp_init(address _endpoint) internal initializer {\\r\\n        __Ownable_init();\\r\\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\\r\\n    }\\r\\n\\r\\n    function lzReceive(\\r\\n        uint16 _srcChainId,\\r\\n        bytes calldata _srcAddress,\\r\\n        uint64 _nonce,\\r\\n        bytes calldata _payload\\r\\n    ) public virtual override {\\r\\n        // lzReceive must be called by the endpoint for security\\r\\n        require(_msgSender() == address(lzEndpoint), \\\"LzApp: invalid endpoint caller\\\");\\r\\n\\r\\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\\r\\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\\r\\n        require(\\r\\n            _srcAddress.length == trustedRemote.length &&\\r\\n                trustedRemote.length > 0 &&\\r\\n                keccak256(_srcAddress) == keccak256(trustedRemote),\\r\\n            \\\"LzApp: invalid source sending contract\\\"\\r\\n        );\\r\\n\\r\\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\r\\n    }\\r\\n\\r\\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\\r\\n    function _blockingLzReceive(\\r\\n        uint16 _srcChainId,\\r\\n        bytes memory _srcAddress,\\r\\n        uint64 _nonce,\\r\\n        bytes memory _payload\\r\\n    ) internal virtual;\\r\\n\\r\\n    function _lzSend(\\r\\n        uint16 _dstChainId,\\r\\n        bytes memory _payload,\\r\\n        address payable _refundAddress,\\r\\n        address _zroPaymentAddress,\\r\\n        bytes memory _adapterParams,\\r\\n        uint _nativeFee\\r\\n    ) internal virtual {\\r\\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\\r\\n        require(trustedRemote.length != 0, \\\"LzApp: destination chain is not a trusted source\\\");\\r\\n        _checkPayloadSize(_dstChainId, _payload.length);\\r\\n        lzEndpoint.send{value: _nativeFee}(\\r\\n            _dstChainId,\\r\\n            trustedRemote,\\r\\n            _payload,\\r\\n            _refundAddress,\\r\\n            _zroPaymentAddress,\\r\\n            _adapterParams\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _checkGasLimit(\\r\\n        uint16 _dstChainId,\\r\\n        uint16 _type,\\r\\n        bytes memory _adapterParams,\\r\\n        uint _extraGas\\r\\n    ) internal view virtual {\\r\\n        uint providedGasLimit = _getGasLimit(_adapterParams);\\r\\n        uint minGasLimit = minDstGasLookup[_dstChainId][_type];\\r\\n        require(minGasLimit > 0, \\\"LzApp: minGasLimit not set\\\");\\r\\n        require(providedGasLimit >= minGasLimit + _extraGas, \\\"LzApp: gas limit is too low\\\");\\r\\n    }\\r\\n\\r\\n    function _getGasLimit(bytes memory _adapterParams) internal pure virtual returns (uint gasLimit) {\\r\\n        require(_adapterParams.length >= 34, \\\"LzApp: invalid adapterParams\\\");\\r\\n        assembly {\\r\\n            gasLimit := mload(add(_adapterParams, 34))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _checkPayloadSize(uint16 _dstChainId, uint _payloadSize) internal view virtual {\\r\\n        uint payloadSizeLimit = payloadSizeLimitLookup[_dstChainId];\\r\\n        if (payloadSizeLimit == 0) {\\r\\n            // use default if not set\\r\\n            payloadSizeLimit = DEFAULT_PAYLOAD_SIZE_LIMIT;\\r\\n        }\\r\\n        require(_payloadSize <= payloadSizeLimit, \\\"LzApp: payload size is too large\\\");\\r\\n    }\\r\\n\\r\\n    //---------------------------UserApplication config----------------------------------------\\r\\n    function getConfig(\\r\\n        uint16 _version,\\r\\n        uint16 _chainId,\\r\\n        address,\\r\\n        uint _configType\\r\\n    ) external view returns (bytes memory) {\\r\\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\\r\\n    }\\r\\n\\r\\n    // generic config for LayerZero user Application\\r\\n    function setConfig(\\r\\n        uint16 _version,\\r\\n        uint16 _chainId,\\r\\n        uint _configType,\\r\\n        bytes calldata _config\\r\\n    ) external override onlyOwner {\\r\\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\\r\\n    }\\r\\n\\r\\n    function setSendVersion(uint16 _version) external override onlyOwner {\\r\\n        lzEndpoint.setSendVersion(_version);\\r\\n    }\\r\\n\\r\\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\\r\\n        lzEndpoint.setReceiveVersion(_version);\\r\\n    }\\r\\n\\r\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\\r\\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\\r\\n    }\\r\\n\\r\\n    // _path = abi.encodePacked(remoteAddress, localAddress)\\r\\n    // this function set the trusted path for the cross-chain communication\\r\\n    function setTrustedRemote(uint16 _remoteChainId, bytes calldata _path) external onlyOwner {\\r\\n        trustedRemoteLookup[_remoteChainId] = _path;\\r\\n        emit SetTrustedRemote(_remoteChainId, _path);\\r\\n    }\\r\\n\\r\\n    function setTrustedRemoteAddress(uint16 _remoteChainId, bytes calldata _remoteAddress) external onlyOwner {\\r\\n        trustedRemoteLookup[_remoteChainId] = abi.encodePacked(_remoteAddress, address(this));\\r\\n        emit SetTrustedRemoteAddress(_remoteChainId, _remoteAddress);\\r\\n    }\\r\\n\\r\\n    function getTrustedRemoteAddress(uint16 _remoteChainId) external view returns (bytes memory) {\\r\\n        bytes memory path = trustedRemoteLookup[_remoteChainId];\\r\\n        require(path.length != 0, \\\"LzApp: no trusted path record\\\");\\r\\n        return path.slice(0, path.length - 20); // the last 20 bytes should be address(this)\\r\\n    }\\r\\n\\r\\n    function setPrecrime(address _precrime) external onlyOwner {\\r\\n        precrime = _precrime;\\r\\n        emit SetPrecrime(_precrime);\\r\\n    }\\r\\n\\r\\n    function setMinDstGas(uint16 _dstChainId, uint16 _packetType, uint _minGas) external onlyOwner {\\r\\n        minDstGasLookup[_dstChainId][_packetType] = _minGas;\\r\\n        emit SetMinDstGas(_dstChainId, _packetType, _minGas);\\r\\n    }\\r\\n\\r\\n    // if the size is 0, it means default size limit\\r\\n    function setPayloadSizeLimit(uint16 _dstChainId, uint _size) external onlyOwner {\\r\\n        payloadSizeLimitLookup[_dstChainId] = _size;\\r\\n    }\\r\\n\\r\\n    //--------------------------- VIEW FUNCTION ----------------------------------------\\r\\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\\r\\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\\r\\n        return keccak256(trustedSource) == keccak256(_srcAddress);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x073b87c27324b188c15e348c9c44658e171e6ce0751247f4b491ef535a44168f\",\"license\":\"MIT\"},\"contracts/libs/layerzero/lzApp/NonblockingLzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./LzApp.sol\\\";\\r\\nimport \\\"../libraries/ExcessivelySafeCall.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/*\\r\\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\\r\\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\\r\\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\\r\\n */\\r\\nabstract contract NonblockingLzApp is LzApp {\\r\\n    using ExcessivelySafeCall for address;\\r\\n\\r\\n    //constructor(address _endpoint) LzApp(_endpoint) {}\\r\\n\\r\\n    function __NonblockingLzApp_init(address _endpoint) internal initializer {\\r\\n        __LzApp_init(_endpoint);\\r\\n    }\\r\\n\\r\\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\\r\\n\\r\\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload, bytes _reason);\\r\\n    event RetryMessageSuccess(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _payloadHash);\\r\\n\\r\\n    // overriding the virtual function in LzReceiver\\r\\n    function _blockingLzReceive(\\r\\n        uint16 _srcChainId,\\r\\n        bytes memory _srcAddress,\\r\\n        uint64 _nonce,\\r\\n        bytes memory _payload\\r\\n    ) internal virtual override {\\r\\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(\\r\\n            gasleft(),\\r\\n            150,\\r\\n            abi.encodeWithSelector(this.nonblockingLzReceive.selector, _srcChainId, _srcAddress, _nonce, _payload)\\r\\n        );\\r\\n        if (!success) {\\r\\n            _storeFailedMessage(_srcChainId, _srcAddress, _nonce, _payload, reason);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _storeFailedMessage(\\r\\n        uint16 _srcChainId,\\r\\n        bytes memory _srcAddress,\\r\\n        uint64 _nonce,\\r\\n        bytes memory _payload,\\r\\n        bytes memory _reason\\r\\n    ) internal virtual {\\r\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\\r\\n        emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload, _reason);\\r\\n    }\\r\\n\\r\\n    function nonblockingLzReceive(\\r\\n        uint16 _srcChainId,\\r\\n        bytes calldata _srcAddress,\\r\\n        uint64 _nonce,\\r\\n        bytes calldata _payload\\r\\n    ) public virtual {\\r\\n        // only internal transaction\\r\\n        require(_msgSender() == address(this), \\\"NonblockingLzApp: caller must be LzApp\\\");\\r\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\r\\n    }\\r\\n\\r\\n    //@notice override this function\\r\\n    function _nonblockingLzReceive(\\r\\n        uint16 _srcChainId,\\r\\n        bytes memory _srcAddress,\\r\\n        uint64 _nonce,\\r\\n        bytes memory _payload\\r\\n    ) internal virtual;\\r\\n\\r\\n    function retryMessage(\\r\\n        uint16 _srcChainId,\\r\\n        bytes calldata _srcAddress,\\r\\n        uint64 _nonce,\\r\\n        bytes calldata _payload\\r\\n    ) public payable virtual {\\r\\n        // assert there is message to retry\\r\\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\\r\\n        require(payloadHash != bytes32(0), \\\"NonblockingLzApp: no stored message\\\");\\r\\n        require(keccak256(_payload) == payloadHash, \\\"NonblockingLzApp: invalid payload\\\");\\r\\n        // clear the stored message\\r\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\\r\\n        // execute the message. revert if it fails again\\r\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\r\\n        emit RetryMessageSuccess(_srcChainId, _srcAddress, _nonce, payloadHash);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x693271a25bac2c9d670c41635d39a631770056d20584ee44815958d61f1e7aa2\",\"license\":\"MIT\"},\"contracts/libs/layerzero/lzApp/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\r\\n\\r\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\r\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\r\\n    // @param _dstChainId - the destination chain identifier\\r\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\r\\n    // @param _payload - a custom bytes payload to send to the destination contract\\r\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\r\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\r\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\r\\n    function send(\\r\\n        uint16 _dstChainId,\\r\\n        bytes calldata _destination,\\r\\n        bytes calldata _payload,\\r\\n        address payable _refundAddress,\\r\\n        address _zroPaymentAddress,\\r\\n        bytes calldata _adapterParams\\r\\n    ) external payable;\\r\\n\\r\\n    // @notice used by the messaging library to publish verified payload\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\r\\n    // @param _dstAddress - the address on destination chain\\r\\n    // @param _nonce - the unbound message ordering nonce\\r\\n    // @param _gasLimit - the gas limit for external contract execution\\r\\n    // @param _payload - verified payload to send to the destination contract\\r\\n    function receivePayload(\\r\\n        uint16 _srcChainId,\\r\\n        bytes calldata _srcAddress,\\r\\n        address _dstAddress,\\r\\n        uint64 _nonce,\\r\\n        uint _gasLimit,\\r\\n        bytes calldata _payload\\r\\n    ) external;\\r\\n\\r\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\r\\n\\r\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\r\\n\\r\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\r\\n    // @param _dstChainId - the destination chain identifier\\r\\n    // @param _userApplication - the user app address on this EVM chain\\r\\n    // @param _payload - the custom message to send over LayerZero\\r\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\r\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\r\\n    function estimateFees(\\r\\n        uint16 _dstChainId,\\r\\n        address _userApplication,\\r\\n        bytes calldata _payload,\\r\\n        bool _payInZRO,\\r\\n        bytes calldata _adapterParam\\r\\n    ) external view returns (uint nativeFee, uint zroFee);\\r\\n\\r\\n    // @notice get this Endpoint's immutable source identifier\\r\\n    function getChainId() external view returns (uint16);\\r\\n\\r\\n    // @notice the interface to retry failed message on this Endpoint destination\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    // @param _payload - the payload to be retried\\r\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\r\\n\\r\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\r\\n\\r\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\r\\n    // @param _userApplication - the user app address on this EVM chain\\r\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\r\\n\\r\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\r\\n    // @param _userApplication - the user app address on this EVM chain\\r\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\r\\n\\r\\n    // @notice query if the non-reentrancy guard for send() is on\\r\\n    // @return true if the guard is on. false otherwise\\r\\n    function isSendingPayload() external view returns (bool);\\r\\n\\r\\n    // @notice query if the non-reentrancy guard for receive() is on\\r\\n    // @return true if the guard is on. false otherwise\\r\\n    function isReceivingPayload() external view returns (bool);\\r\\n\\r\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\r\\n    // @param _version - messaging library version\\r\\n    // @param _chainId - the chainId for the pending config change\\r\\n    // @param _userApplication - the contract address of the user application\\r\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\r\\n    function getConfig(\\r\\n        uint16 _version,\\r\\n        uint16 _chainId,\\r\\n        address _userApplication,\\r\\n        uint _configType\\r\\n    ) external view returns (bytes memory);\\r\\n\\r\\n    // @notice get the send() LayerZero messaging library version\\r\\n    // @param _userApplication - the contract address of the user application\\r\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\r\\n\\r\\n    // @notice get the lzReceive() LayerZero messaging library version\\r\\n    // @param _userApplication - the contract address of the user application\\r\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\r\\n}\\r\\n\",\"keccak256\":\"0x47a0b1f33c56f3f23e20254d592c9a6ce646c86a646758bc8e11158482e6aaf1\",\"license\":\"MIT\"},\"contracts/libs/layerzero/lzApp/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface ILayerZeroReceiver {\\r\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\r\\n    // @param _srcChainId - the source endpoint identifier\\r\\n    // @param _srcAddress - the source sending contract address from the source chain\\r\\n    // @param _nonce - the ordered message nonce\\r\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\r\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xe377e661a587f855100ae6bbc9159e9aa279a99b632b445b3b9fb45a347da63a\",\"license\":\"MIT\"},\"contracts/libs/layerzero/lzApp/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface ILayerZeroUserApplicationConfig {\\r\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\r\\n    // @param _version - messaging library version\\r\\n    // @param _chainId - the chainId for the pending config change\\r\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\r\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\r\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\r\\n\\r\\n    // @notice set the send() LayerZero messaging library version to _version\\r\\n    // @param _version - new messaging library version\\r\\n    function setSendVersion(uint16 _version) external;\\r\\n\\r\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\r\\n    // @param _version - new messaging library version\\r\\n    function setReceiveVersion(uint16 _version) external;\\r\\n\\r\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\r\\n    // @param _srcChainId - the chainId of the source chain\\r\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\r\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x42d10415d035529fcdff738d6542844ad58124b4e1da5a8ff92d6ddd8bf96513\",\"license\":\"MIT\"},\"contracts/libs/layerzero/token/onft721/ONFT721Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./interfaces/IONFT721.sol\\\";\\r\\nimport \\\"./ONFT721Core.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\r\\n\\r\\nabstract contract ONFT721Base is ONFT721Core, ERC721Upgradeable, IONFT721 {\\r\\n    /*\\r\\n    constructor(\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        uint _minGasToTransfer,\\r\\n        address _lzEndpoint\\r\\n    ) ERC721Upgradeable(_name, _symbol) ONFT721Core(_minGasToTransfer, _lzEndpoint) {}\\r\\n    */\\r\\n    function __ONFT721Base_init(\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        uint _minGasToTransfer,\\r\\n        address _lzEndpoint\\r\\n    ) internal initializer {\\r\\n        __ERC721_init(_name, _symbol);\\r\\n        __ONFT721Core_init(_minGasToTransfer, _lzEndpoint);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceId\\r\\n    ) public view virtual override(ONFT721Core, ERC721Upgradeable, IERC165Upgradeable) returns (bool) {\\r\\n        return interfaceId == type(IONFT721).interfaceId || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    function _debitFrom(address _from, uint16, bytes memory, uint _tokenId) internal virtual override {\\r\\n        require(_isApprovedOrOwner(_msgSender(), _tokenId), \\\"ONFT721: send caller is not owner nor approved\\\");\\r\\n        require(ERC721Upgradeable.ownerOf(_tokenId) == _from, \\\"ONFT721: send from incorrect owner\\\");\\r\\n        _transfer(_from, address(this), _tokenId);\\r\\n    }\\r\\n\\r\\n    function _creditTo(uint16, address _toAddress, uint _tokenId) internal virtual override {\\r\\n        require(!_exists(_tokenId) || (_exists(_tokenId) && ERC721Upgradeable.ownerOf(_tokenId) == address(this)));\\r\\n        if (!_exists(_tokenId)) {\\r\\n            _safeMint(_toAddress, _tokenId);\\r\\n        } else {\\r\\n            _transfer(address(this), _toAddress, _tokenId);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd17b089bb4724781c954bf4ae99d80867708dfccbb7c678284c69081bb840f11\",\"license\":\"MIT\"},\"contracts/libs/layerzero/token/onft721/ONFT721Core.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./interfaces/IONFT721Core.sol\\\";\\r\\nimport \\\"../../lzApp/NonblockingLzApp.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\n\\r\\nabstract contract ONFT721Core is NonblockingLzApp, ERC165Upgradeable, ReentrancyGuardUpgradeable, IONFT721Core {\\r\\n    uint16 public constant FUNCTION_TYPE_SEND = 1;\\r\\n\\r\\n    struct StoredCredit {\\r\\n        uint16 srcChainId;\\r\\n        address toAddress;\\r\\n        uint index; // which index of the tokenIds remain\\r\\n        bool creditsRemain;\\r\\n    }\\r\\n\\r\\n    uint public minGasToTransferAndStore; // min amount of gas required to transfer, and also store the payload\\r\\n    mapping(uint16 => uint) public dstChainIdToBatchLimit;\\r\\n    mapping(uint16 => uint) public dstChainIdToTransferGas; // per transfer amount of gas required to mint/transfer on the dst\\r\\n    mapping(bytes32 => StoredCredit) public storedCredits;\\r\\n\\r\\n    /*\\r\\n    constructor(uint _minGasToTransferAndStore, address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {\\r\\n        require(_minGasToTransferAndStore > 0, \\\"minGasToTransferAndStore must be > 0\\\");\\r\\n        minGasToTransferAndStore = _minGasToTransferAndStore;\\r\\n    }*/\\r\\n    function __ONFT721Core_init(uint _minGasToTransferAndStore, address _endpoint) internal initializer {\\r\\n        require(_minGasToTransferAndStore > 0, \\\"minGasToTransferAndStore must be > 0\\\");\\r\\n        minGasToTransferAndStore = _minGasToTransferAndStore;\\r\\n        __NonblockingLzApp_init(_endpoint);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceId\\r\\n    ) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\r\\n        return interfaceId == type(IONFT721Core).interfaceId || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    function estimateSendFee(\\r\\n        uint16 _dstChainId,\\r\\n        bytes memory _toAddress,\\r\\n        uint _tokenId,\\r\\n        bool _useZro,\\r\\n        bytes memory _adapterParams\\r\\n    ) public view virtual override returns (uint nativeFee, uint zroFee) {\\r\\n        return estimateSendBatchFee(_dstChainId, _toAddress, _toSingletonArray(_tokenId), _useZro, _adapterParams);\\r\\n    }\\r\\n\\r\\n    function estimateSendBatchFee(\\r\\n        uint16 _dstChainId,\\r\\n        bytes memory _toAddress,\\r\\n        uint[] memory _tokenIds,\\r\\n        bool _useZro,\\r\\n        bytes memory _adapterParams\\r\\n    ) public view virtual override returns (uint nativeFee, uint zroFee) {\\r\\n        bytes memory payload = abi.encode(_toAddress, _tokenIds);\\r\\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\\r\\n    }\\r\\n\\r\\n    function sendFrom(\\r\\n        address _from,\\r\\n        uint16 _dstChainId,\\r\\n        bytes memory _toAddress,\\r\\n        uint _tokenId,\\r\\n        address payable _refundAddress,\\r\\n        address _zroPaymentAddress,\\r\\n        bytes memory _adapterParams\\r\\n    ) public payable virtual override {\\r\\n        _send(\\r\\n            _from,\\r\\n            _dstChainId,\\r\\n            _toAddress,\\r\\n            _toSingletonArray(_tokenId),\\r\\n            _refundAddress,\\r\\n            _zroPaymentAddress,\\r\\n            _adapterParams\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function sendBatchFrom(\\r\\n        address _from,\\r\\n        uint16 _dstChainId,\\r\\n        bytes memory _toAddress,\\r\\n        uint[] memory _tokenIds,\\r\\n        address payable _refundAddress,\\r\\n        address _zroPaymentAddress,\\r\\n        bytes memory _adapterParams\\r\\n    ) public payable virtual override {\\r\\n        _send(_from, _dstChainId, _toAddress, _tokenIds, _refundAddress, _zroPaymentAddress, _adapterParams);\\r\\n    }\\r\\n\\r\\n    function _send(\\r\\n        address _from,\\r\\n        uint16 _dstChainId,\\r\\n        bytes memory _toAddress,\\r\\n        uint[] memory _tokenIds,\\r\\n        address payable _refundAddress,\\r\\n        address _zroPaymentAddress,\\r\\n        bytes memory _adapterParams\\r\\n    ) internal virtual {\\r\\n        // allow 1 by default\\r\\n        require(_tokenIds.length > 0, \\\"tokenIds[] is empty\\\");\\r\\n        require(\\r\\n            _tokenIds.length == 1 || _tokenIds.length <= dstChainIdToBatchLimit[_dstChainId],\\r\\n            \\\"batch size exceeds dst batch limit\\\"\\r\\n        );\\r\\n\\r\\n        for (uint i = 0; i < _tokenIds.length; i++) {\\r\\n            _debitFrom(_from, _dstChainId, _toAddress, _tokenIds[i]);\\r\\n        }\\r\\n\\r\\n        bytes memory payload = abi.encode(_toAddress, _tokenIds);\\r\\n\\r\\n        _checkGasLimit(\\r\\n            _dstChainId,\\r\\n            FUNCTION_TYPE_SEND,\\r\\n            _adapterParams,\\r\\n            dstChainIdToTransferGas[_dstChainId] * _tokenIds.length\\r\\n        );\\r\\n        _lzSend(_dstChainId, payload, _refundAddress, _zroPaymentAddress, _adapterParams, msg.value);\\r\\n        emit SendToChain(_dstChainId, _from, _toAddress, _tokenIds);\\r\\n    }\\r\\n\\r\\n    function _nonblockingLzReceive(\\r\\n        uint16 _srcChainId,\\r\\n        bytes memory _srcAddress,\\r\\n        uint64 /*_nonce*/,\\r\\n        bytes memory _payload\\r\\n    ) internal virtual override {\\r\\n        // decode and load the toAddress\\r\\n        (bytes memory toAddressBytes, uint[] memory tokenIds) = abi.decode(_payload, (bytes, uint[]));\\r\\n\\r\\n        address toAddress;\\r\\n        assembly {\\r\\n            toAddress := mload(add(toAddressBytes, 20))\\r\\n        }\\r\\n\\r\\n        uint nextIndex = _creditTill(_srcChainId, toAddress, 0, tokenIds);\\r\\n        if (nextIndex < tokenIds.length) {\\r\\n            // not enough gas to complete transfers, store to be cleared in another tx\\r\\n            bytes32 hashedPayload = keccak256(_payload);\\r\\n            storedCredits[hashedPayload] = StoredCredit(_srcChainId, toAddress, nextIndex, true);\\r\\n            emit CreditStored(hashedPayload, _payload);\\r\\n        }\\r\\n\\r\\n        emit ReceiveFromChain(_srcChainId, _srcAddress, toAddress, tokenIds);\\r\\n    }\\r\\n\\r\\n    // Public function for anyone to clear and deliver the remaining batch sent tokenIds\\r\\n    function clearCredits(bytes memory _payload) external virtual nonReentrant {\\r\\n        bytes32 hashedPayload = keccak256(_payload);\\r\\n        require(storedCredits[hashedPayload].creditsRemain, \\\"no credits stored\\\");\\r\\n\\r\\n        (, uint[] memory tokenIds) = abi.decode(_payload, (bytes, uint[]));\\r\\n\\r\\n        uint nextIndex = _creditTill(\\r\\n            storedCredits[hashedPayload].srcChainId,\\r\\n            storedCredits[hashedPayload].toAddress,\\r\\n            storedCredits[hashedPayload].index,\\r\\n            tokenIds\\r\\n        );\\r\\n        require(nextIndex > storedCredits[hashedPayload].index, \\\"not enough gas to process credit transfer\\\");\\r\\n\\r\\n        if (nextIndex == tokenIds.length) {\\r\\n            // cleared the credits, delete the element\\r\\n            delete storedCredits[hashedPayload];\\r\\n            emit CreditCleared(hashedPayload);\\r\\n        } else {\\r\\n            // store the next index to mint\\r\\n            storedCredits[hashedPayload] = StoredCredit(\\r\\n                storedCredits[hashedPayload].srcChainId,\\r\\n                storedCredits[hashedPayload].toAddress,\\r\\n                nextIndex,\\r\\n                true\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // When a srcChain has the ability to transfer more chainIds in a single tx than the dst can do.\\r\\n    // Needs the ability to iterate and stop if the minGasToTransferAndStore is not met\\r\\n    function _creditTill(\\r\\n        uint16 _srcChainId,\\r\\n        address _toAddress,\\r\\n        uint _startIndex,\\r\\n        uint[] memory _tokenIds\\r\\n    ) internal returns (uint) {\\r\\n        uint i = _startIndex;\\r\\n        while (i < _tokenIds.length) {\\r\\n            // if not enough gas to process, store this index for next loop\\r\\n            if (gasleft() < minGasToTransferAndStore) break;\\r\\n\\r\\n            _creditTo(_srcChainId, _toAddress, _tokenIds[i]);\\r\\n            i++;\\r\\n        }\\r\\n\\r\\n        // indicates the next index to send of tokenIds,\\r\\n        // if i == tokenIds.length, we are finished\\r\\n        return i;\\r\\n    }\\r\\n\\r\\n    function setMinGasToTransferAndStore(uint _minGasToTransferAndStore) external onlyOwner {\\r\\n        require(_minGasToTransferAndStore > 0, \\\"minGasToTransferAndStore must be > 0\\\");\\r\\n        minGasToTransferAndStore = _minGasToTransferAndStore;\\r\\n        emit SetMinGasToTransferAndStore(_minGasToTransferAndStore);\\r\\n    }\\r\\n\\r\\n    // ensures enough gas in adapter params to handle batch transfer gas amounts on the dst\\r\\n    function setDstChainIdToTransferGas(uint16 _dstChainId, uint _dstChainIdToTransferGas) external onlyOwner {\\r\\n        require(_dstChainIdToTransferGas > 0, \\\"dstChainIdToTransferGas must be > 0\\\");\\r\\n        dstChainIdToTransferGas[_dstChainId] = _dstChainIdToTransferGas;\\r\\n        emit SetDstChainIdToTransferGas(_dstChainId, _dstChainIdToTransferGas);\\r\\n    }\\r\\n\\r\\n    // limit on src the amount of tokens to batch send\\r\\n    function setDstChainIdToBatchLimit(uint16 _dstChainId, uint _dstChainIdToBatchLimit) external onlyOwner {\\r\\n        require(_dstChainIdToBatchLimit > 0, \\\"dstChainIdToBatchLimit must be > 0\\\");\\r\\n        dstChainIdToBatchLimit[_dstChainId] = _dstChainIdToBatchLimit;\\r\\n        emit SetDstChainIdToBatchLimit(_dstChainId, _dstChainIdToBatchLimit);\\r\\n    }\\r\\n\\r\\n    function _debitFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _tokenId) internal virtual;\\r\\n\\r\\n    function _creditTo(uint16 _srcChainId, address _toAddress, uint _tokenId) internal virtual;\\r\\n\\r\\n    function _toSingletonArray(uint element) internal pure returns (uint[] memory) {\\r\\n        uint[] memory array = new uint[](1);\\r\\n        array[0] = element;\\r\\n        return array;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc382fefe9cd444f741b55ba0fb6b384e4aa6669758e323d55d592f3018910b9a\",\"license\":\"MIT\"},\"contracts/libs/layerzero/token/onft721/interfaces/IONFT721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport \\\"./IONFT721Core.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ONFT standard\\r\\n */\\r\\ninterface IONFT721 is IONFT721Core, IERC721Upgradeable {\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x6b4da73b4b409b9bf99b19399eb7b524080de82501466a1f7bf6636b0854100d\",\"license\":\"MIT\"},\"contracts/libs/layerzero/token/onft721/interfaces/IONFT721Core.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ONFT Core standard\\r\\n */\\r\\ninterface IONFT721Core is IERC165Upgradeable {\\r\\n    /**\\r\\n     * @dev Emitted when `_tokenIds[]` are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\\r\\n     * `_nonce` is the outbound nonce from\\r\\n     */\\r\\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes indexed _toAddress, uint[] _tokenIds);\\r\\n    event ReceiveFromChain(\\r\\n        uint16 indexed _srcChainId,\\r\\n        bytes indexed _srcAddress,\\r\\n        address indexed _toAddress,\\r\\n        uint[] _tokenIds\\r\\n    );\\r\\n    event SetMinGasToTransferAndStore(uint _minGasToTransferAndStore);\\r\\n    event SetDstChainIdToTransferGas(uint16 _dstChainId, uint _dstChainIdToTransferGas);\\r\\n    event SetDstChainIdToBatchLimit(uint16 _dstChainId, uint _dstChainIdToBatchLimit);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `_payload` was received from lz, but not enough gas to deliver all tokenIds\\r\\n     */\\r\\n    event CreditStored(bytes32 _hashedPayload, bytes _payload);\\r\\n    /**\\r\\n     * @dev Emitted when `_hashedPayload` has been completely delivered\\r\\n     */\\r\\n    event CreditCleared(bytes32 _hashedPayload);\\r\\n\\r\\n    /**\\r\\n     * @dev send token `_tokenId` to (`_dstChainId`, `_toAddress`) from `_from`\\r\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\r\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\r\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\r\\n     */\\r\\n    function sendFrom(\\r\\n        address _from,\\r\\n        uint16 _dstChainId,\\r\\n        bytes calldata _toAddress,\\r\\n        uint _tokenId,\\r\\n        address payable _refundAddress,\\r\\n        address _zroPaymentAddress,\\r\\n        bytes calldata _adapterParams\\r\\n    ) external payable;\\r\\n\\r\\n    /**\\r\\n     * @dev send tokens `_tokenIds[]` to (`_dstChainId`, `_toAddress`) from `_from`\\r\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\r\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\r\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\r\\n     */\\r\\n    function sendBatchFrom(\\r\\n        address _from,\\r\\n        uint16 _dstChainId,\\r\\n        bytes calldata _toAddress,\\r\\n        uint[] calldata _tokenIds,\\r\\n        address payable _refundAddress,\\r\\n        address _zroPaymentAddress,\\r\\n        bytes calldata _adapterParams\\r\\n    ) external payable;\\r\\n\\r\\n    /**\\r\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\r\\n     * _dstChainId - L0 defined chain id to send tokens too\\r\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\r\\n     * _tokenId - token Id to transfer\\r\\n     * _useZro - indicates to use zro to pay L0 fees\\r\\n     * _adapterParams - flexible bytes array to indicate messaging adapter services in L0\\r\\n     */\\r\\n    function estimateSendFee(\\r\\n        uint16 _dstChainId,\\r\\n        bytes calldata _toAddress,\\r\\n        uint _tokenId,\\r\\n        bool _useZro,\\r\\n        bytes calldata _adapterParams\\r\\n    ) external view returns (uint nativeFee, uint zroFee);\\r\\n\\r\\n    /**\\r\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\r\\n     * _dstChainId - L0 defined chain id to send tokens too\\r\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\r\\n     * _tokenIds[] - token Ids to transfer\\r\\n     * _useZro - indicates to use zro to pay L0 fees\\r\\n     * _adapterParams - flexible bytes array to indicate messaging adapter services in L0\\r\\n     */\\r\\n    function estimateSendBatchFee(\\r\\n        uint16 _dstChainId,\\r\\n        bytes calldata _toAddress,\\r\\n        uint[] calldata _tokenIds,\\r\\n        bool _useZro,\\r\\n        bytes calldata _adapterParams\\r\\n    ) external view returns (uint nativeFee, uint zroFee);\\r\\n}\\r\\n\",\"keccak256\":\"0x785335ec63fb18925794f579105fb4625b7896ea419704c671fa7104db17cff8\",\"license\":\"MIT\"},\"contracts/mocks/MockOBoredApeYachtClub.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../libs/CustomONFT721Base.sol\\\";\\r\\n\\r\\ncontract MockOBoredApeYachtClub is CustomONFT721Base {\\r\\n    function initialize(address _collateral, address _lzEndpoint) public initializer {\\r\\n        __CustomONFT721Base_init(\\\"MockOBoredApeYachtClub\\\", \\\"MockOBAYC\\\", _collateral, 1, _lzEndpoint);\\r\\n    }\\r\\n\\r\\n    function _baseURI() internal pure override returns (string memory) {\\r\\n        return \\\"ipfs://QmeSjSinHpPnmXmspMjwiXyN6zS4E9zccariGR3jxcaWtq/\\\";\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9e8c481433c9e12186e6d7d8d8e3b3d1a610cd1d420569743b00dc876479e22e\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506151d8806100206000396000f3fe6080604052600436106103005760003560e01c80637f81be6911610191578063b88d4fde116100e2578063d8dfeb4511610090578063d8dfeb4514610a11578063df2a5b3b14610a32578063e985e9c514610a52578063eb8d72b714610a72578063f235364114610a92578063f2fde38b14610ab2578063f5ecbdbc14610ad2578063fa25f9b614610af257600080fd5b8063b88d4fde14610948578063baf3292d14610968578063c446183414610988578063c87b56dd1461099e578063cbed8b9c146109be578063d12473a5146109de578063d1deba1f146109fe57600080fd5b80639f38369a1161013f5780639f38369a1461087a578063a22cb4651461089a578063a6c3d165146108ba578063a8f40de5146108da578063ab3ffb93146108ed578063af3fb21c14610900578063b353aaa71461092857600080fd5b80637f81be691461078f5780638cfd8f5c146107af5780638da5cb5b146107e75780638ffa1f2a14610805578063950c8a741461082557806395d89b41146108455780639ea5d6b11461085a57600080fd5b80633f1f4fa4116102565780635b8c41e6116102045780635b8c41e6146106785780636352211e146106c757806366ad5c8a146106e75780636d22b4e01461070757806370a0823114610727578063715018a6146107475780637533d7881461075c5780637f68e5341461077c57600080fd5b80633f1f4fa41461058757806342842e0e146105c257806342d65a8d146105e25780634828819014610602578063485cc955146106185780634ac3f4ff14610638578063519056361461066557600080fd5b80630df37483116102b35780630df374831461041657806310ddb13714610436578063150b7a021461045657806322a3ecf91461048f57806323b872dd146105125780632a205e3d146105325780633d8b38f61461056757600080fd5b80621d35671461030557806301ffc9a71461032757806306fdde031461035c57806307e0db171461037e578063081812fc1461039e578063095ea7b3146103d65780630b4cad4c146103f6575b600080fd5b34801561031157600080fd5b50610325610320366004613ed4565b610b1f565b005b34801561033357600080fd5b50610347610342366004613f7d565b610d3b565b60405190151581526020015b60405180910390f35b34801561036857600080fd5b50610371610d5e565b6040516103539190613ff2565b34801561038a57600080fd5b50610325610399366004614005565b610df0565b3480156103aa57600080fd5b506103be6103b9366004614020565b610e5d565b6040516001600160a01b039091168152602001610353565b3480156103e257600080fd5b506103256103f1366004614059565b610e84565b34801561040257600080fd5b50610325610411366004614020565b610f9a565b34801561042257600080fd5b50610325610431366004614085565b610ffe565b34801561044257600080fd5b50610325610451366004614005565b61101d565b34801561046257600080fd5b50610476610471366004614164565b611059565b6040516001600160e01b03199091168152602001610353565b34801561049b57600080fd5b506104e36104aa366004614020565b60d26020526000908152604090208054600182015460029092015461ffff821692620100009092046001600160a01b0316919060ff1684565b6040805161ffff90951685526001600160a01b0390931660208501529183015215156060820152608001610353565b34801561051e57600080fd5b5061032561052d3660046141cf565b61106a565b34801561053e57600080fd5b5061055261054d366004614220565b61109c565b60408051928352602083019190915201610353565b34801561057357600080fd5b506103476105823660046142ae565b6110c2565b34801561059357600080fd5b506105b46105a2366004614005565b60686020526000908152604090205481565b604051908152602001610353565b3480156105ce57600080fd5b506103256105dd3660046141cf565b61118e565b3480156105ee57600080fd5b506103256105fd3660046142ae565b6111a9565b34801561060e57600080fd5b506105b460cf5481565b34801561062457600080fd5b50610325610633366004614300565b611213565b34801561064457600080fd5b506105b4610653366004614005565b60d06020526000908152604090205481565b610325610673366004614339565b611329565b34801561068457600080fd5b506105b46106933660046143f2565b606a602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b3480156106d357600080fd5b506103be6106e2366004614020565b611340565b3480156106f357600080fd5b50610325610702366004613ed4565b611375565b34801561071357600080fd5b5061032561072236600461444f565b611451565b34801561073357600080fd5b506105b46107423660046144e3565b611534565b34801561075357600080fd5b506103256115ba565b34801561076857600080fd5b50610371610777366004614005565b6115ce565b61032561078a366004614500565b611668565b34801561079b57600080fd5b506103be6107aa366004614020565b6116d8565b3480156107bb57600080fd5b506105b46107ca366004614559565b606760209081526000928352604080842090915290825290205481565b3480156107f357600080fd5b506033546001600160a01b03166103be565b34801561081157600080fd5b5061032561082036600461458c565b6116f9565b34801561083157600080fd5b506069546103be906001600160a01b031681565b34801561085157600080fd5b50610371611945565b34801561086657600080fd5b50610325610875366004614085565b611954565b34801561088657600080fd5b50610371610895366004614005565b611a0b565b3480156108a657600080fd5b506103256108b53660046145c0565b611b22565b3480156108c657600080fd5b506103256108d53660046142ae565b611b31565b6103256108e83660046145ec565b611bb7565b6103256108fb366004614726565b611c62565b34801561090c57600080fd5b50610915600181565b60405161ffff9091168152602001610353565b34801561093457600080fd5b506065546103be906001600160a01b031681565b34801561095457600080fd5b50610325610963366004614164565b611c71565b34801561097457600080fd5b506103256109833660046144e3565b611ca9565b34801561099457600080fd5b506105b461271081565b3480156109aa57600080fd5b506103716109b9366004614020565b611cff565b3480156109ca57600080fd5b506103256109d93660046147db565b611d65565b3480156109ea57600080fd5b506103256109f9366004614085565b611dde565b610325610a0c366004613ed4565b611e8e565b348015610a1d57600080fd5b50610137546103be906001600160a01b031681565b348015610a3e57600080fd5b50610325610a4d366004614838565b6120a4565b348015610a5e57600080fd5b50610347610a6d366004614300565b61210e565b348015610a7e57600080fd5b50610325610a8d3660046142ae565b61213c565b348015610a9e57600080fd5b50610552610aad366004614874565b612196565b348015610abe57600080fd5b50610325610acd3660046144e3565b612253565b348015610ade57600080fd5b50610371610aed3660046148ed565b6122c9565b348015610afe57600080fd5b506105b4610b0d366004614005565b60d16020526000908152604090205481565b6065546001600160a01b0316336001600160a01b031614610b875760405162461bcd60e51b815260206004820152601e60248201527f4c7a4170703a20696e76616c696420656e64706f696e742063616c6c6572000060448201526064015b60405180910390fd5b61ffff861660009081526066602052604081208054610ba59061493a565b80601f0160208091040260200160405190810160405280929190818152602001828054610bd19061493a565b8015610c1e5780601f10610bf357610100808354040283529160200191610c1e565b820191906000526020600020905b815481529060010190602001808311610c0157829003601f168201915b50505050509050805186869050148015610c39575060008151115b8015610c61575080516020820120604051610c579088908890614975565b6040518091039020145b610cbc5760405162461bcd60e51b815260206004820152602660248201527f4c7a4170703a20696e76616c696420736f757263652073656e64696e6720636f6044820152651b9d1c9858dd60d21b6064820152608401610b7e565b610d328787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8a018190048102820181019092528881528a93509150889088908190840183828082843760009201919091525061236f92505050565b50505050505050565b60006001600160e01b031982161580610d585750610d58826123e8565b92915050565b606060d38054610d6d9061493a565b80601f0160208091040260200160405190810160405280929190818152602001828054610d999061493a565b8015610de65780601f10610dbb57610100808354040283529160200191610de6565b820191906000526020600020905b815481529060010190602001808311610dc957829003601f168201915b5050505050905090565b610df8612428565b6065546040516307e0db1760e01b815261ffff831660048201526001600160a01b03909116906307e0db17906024015b600060405180830381600087803b158015610e4257600080fd5b505af1158015610e56573d6000803e3d6000fd5b5050505050565b6000610e6882612482565b50600090815260d760205260409020546001600160a01b031690565b6000610e8f82611340565b9050806001600160a01b0316836001600160a01b03161415610efd5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610b7e565b336001600160a01b0382161480610f195750610f19813361210e565b610f8b5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610b7e565b610f9583836124a7565b505050565b610fa2612428565b60008111610fc25760405162461bcd60e51b8152600401610b7e90614985565b60cf8190556040518181527ffebbc4f8bb9ec2313950c718d43123124b15778efda4c1f1d529de2995b4f34d906020015b60405180910390a150565b611006612428565b61ffff909116600090815260686020526040902055565b611025612428565b6065546040516310ddb13760e01b815261ffff831660048201526001600160a01b03909116906310ddb13790602401610e28565b630a85bd0160e11b5b949350505050565b611075335b82612515565b6110915760405162461bcd60e51b8152600401610b7e906149c9565b610f95838383612573565b6000806110b487876110ad886126d7565b8787612196565b915091509550959350505050565b61ffff8316600090815260666020526040812080548291906110e39061493a565b80601f016020809104026020016040519081016040528092919081815260200182805461110f9061493a565b801561115c5780601f106111315761010080835404028352916020019161115c565b820191906000526020600020905b81548152906001019060200180831161113f57829003601f168201915b505050505090508383604051611173929190614975565b60405180910390208180519060200120149150509392505050565b610f9583838360405180602001604052806000815250611c71565b6111b1612428565b6065546040516342d65a8d60e01b81526001600160a01b03909116906342d65a8d906111e590869086908690600401614a3f565b600060405180830381600087803b1580156111ff57600080fd5b505af1158015610d32573d6000803e3d6000fd5b600054610100900460ff16158080156112335750600054600160ff909116105b80611254575061124230612722565b158015611254575060005460ff166001145b6112705760405162461bcd60e51b8152600401610b7e90614a5d565b6000805460ff191660011790558015611293576000805461ff0019166101001790555b6112f06040518060400160405280601681526020017526b7b1b5a7a137b932b220b832acb0b1b43a21b63ab160511b815250604051806040016040528060098152602001684d6f636b4f4241594360b81b81525085600186611451565b8015610f95576000805461ff001916905560405160018152600080516020615183833981519152906020015b60405180910390a1505050565b610d32878787611338886126d7565b878787612731565b600081815260d560205260408120546001600160a01b031680610d585760405162461bcd60e51b8152600401610b7e90614aab565b3330146113d35760405162461bcd60e51b815260206004820152602660248201527f4e6f6e626c6f636b696e674c7a4170703a2063616c6c6572206d7573742062656044820152650204c7a4170760d41b6064820152608401610b7e565b6114498686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f89018190048102820181019092528781528993509150879087908190840183828082843760009201919091525061290592505050565b505050505050565b600054610100900460ff16158080156114715750600054600160ff909116105b80611492575061148030612722565b158015611492575060005460ff166001145b6114ae5760405162461bcd60e51b8152600401610b7e90614a5d565b6000805460ff1916600117905580156114d1576000805461ff0019166101001790555b6114dd86868585612a5c565b61013780546001600160a01b0319166001600160a01b0386161790558015611449576000805461ff0019169055604051600181526000805160206151838339815191529060200160405180910390a1505050505050565b60006001600160a01b03821661159e5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610b7e565b506001600160a01b0316600090815260d6602052604090205490565b6115c2612428565b6115cc6000612b2b565b565b606660205260009081526040902080546115e79061493a565b80601f01602080910402602001604051908101604052809291908181526020018280546116139061493a565b80156116605780601f1061163557610100808354040283529160200191611660565b820191906000526020600020905b81548152906001019060200180831161164357829003601f168201915b505050505081565b60003360405160200161167b9190614add565b6040516020818303038152906040529050610e566116963390565b85838833600089898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061132992505050565b60006116e382612b7d565b156116f157610d5882611340565b506000919050565b611701612b9a565b8051602080830191909120600081815260d290925260409091206002015460ff166117625760405162461bcd60e51b81526020600482015260116024820152701b9bc818dc99591a5d1cc81cdd1bdc9959607a1b6044820152606401610b7e565b6000828060200190518101906117789190614b3a565b600084815260d26020526040812080546001909101549294509092506117b49161ffff8216916201000090046001600160a01b03169085612bf4565b600084815260d2602052604090206001015490915081116118295760405162461bcd60e51b815260206004820152602960248201527f6e6f7420656e6f7567682067617320746f2070726f6365737320637265646974604482015268103a3930b739b332b960b91b6064820152608401610b7e565b81518114156118a157600083815260d2602052604080822080546001600160b01b031916815560018101929092556002909101805460ff19169055517fd7be02b8dd0d27bd0517a9cb4d7469ce27df4313821ae5ec1ff69acc594ba233906118949085815260200190565b60405180910390a1611935565b60408051608081018252600085815260d26020818152848320805461ffff80821687526001600160a01b03620100008084048216868a019081529989018b8152600160608b01818152998f90529790965297519851169096026001600160b01b03199091169690951695909517939093178455915191830191909155516002909101805491151560ff199092169190911790555b5050506119426001609d55565b50565b606060d48054610d6d9061493a565b61195c612428565b600081116119b75760405162461bcd60e51b815260206004820152602260248201527f647374436861696e4964546f42617463684c696d6974206d757374206265203e604482015261020360f41b6064820152608401610b7e565b61ffff8216600081815260d06020908152604091829020849055815192835282018390527f7315f7654d594ead24a30160ed9ba2d23247f543016b918343591e93d7afdb6d91015b60405180910390a15050565b61ffff8116600090815260666020526040812080546060929190611a2e9061493a565b80601f0160208091040260200160405190810160405280929190818152602001828054611a5a9061493a565b8015611aa75780601f10611a7c57610100808354040283529160200191611aa7565b820191906000526020600020905b815481529060010190602001808311611a8a57829003601f168201915b50505050509050805160001415611b005760405162461bcd60e51b815260206004820152601d60248201527f4c7a4170703a206e6f20747275737465642070617468207265636f72640000006044820152606401610b7e565b611b1b600060148351611b139190614c0a565b839190612c46565b9392505050565b611b2d338383612d53565b5050565b611b39612428565b818130604051602001611b4e93929190614c21565b60408051601f1981840301815291815261ffff85166000908152606660209081529190208251611b8393919290910190613d51565b507f8c0400cfe2d1199b1a725c78960bcc2a344d869b80590d0f2bd005db15a572ce83838360405161131c93929190614a3f565b600033604051602001611bca9190614add565b6040516020818303038152906040529050611449611be53390565b8583898980806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611c24925061236b915050565b600089898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c6292505050565b610d3287878787878787612731565b611c7b3383612515565b611c975760405162461bcd60e51b8152600401610b7e906149c9565b611ca384848484612e1e565b50505050565b611cb1612428565b606980546001600160a01b0319166001600160a01b0383169081179091556040519081527f5db758e995a17ec1ad84bdef7e8c3293a0bd6179bcce400dff5d4c3d87db726b90602001610ff3565b6060611d0a82612482565b6000611d14612e51565b90506000815111611d345760405180602001604052806000815250611b1b565b80611d3e84612e71565b604051602001611d4f929190614c42565b6040516020818303038152906040529392505050565b611d6d612428565b6065546040516332fb62e760e21b81526001600160a01b039091169063cbed8b9c90611da59088908890889088908890600401614c71565b600060405180830381600087803b158015611dbf57600080fd5b505af1158015611dd3573d6000803e3d6000fd5b505050505050505050565b611de6612428565b60008111611e425760405162461bcd60e51b815260206004820152602360248201527f647374436861696e4964546f5472616e73666572476173206d7573742062652060448201526203e20360ec1b6064820152608401610b7e565b61ffff8216600081815260d16020908152604091829020849055815192835282018390527fc46df2983228ac2d9754e94a0d565e6671665dc8ad38602bc8e544f0685a29fb91016119ff565b61ffff86166000908152606a60205260408082209051611eb19088908890614975565b90815260408051602092819003830190206001600160401b03871660009081529252902054905080611f315760405162461bcd60e51b815260206004820152602360248201527f4e6f6e626c6f636b696e674c7a4170703a206e6f2073746f726564206d65737360448201526261676560e81b6064820152608401610b7e565b808383604051611f42929190614975565b604051809103902014611fa15760405162461bcd60e51b815260206004820152602160248201527f4e6f6e626c6f636b696e674c7a4170703a20696e76616c6964207061796c6f616044820152601960fa1b6064820152608401610b7e565b61ffff87166000908152606a60205260408082209051611fc49089908990614975565b90815260408051602092819003830181206001600160401b038916600090815290845282902093909355601f8801829004820283018201905286825261205c918991899089908190840183828082843760009201919091525050604080516020601f8a018190048102820181019092528881528a93509150889088908190840183828082843760009201919091525061290592505050565b7fc264d91f3adc5588250e1551f547752ca0cfa8f6b530d243b9f9f4cab10ea8e58787878785604051612093959493929190614caa565b60405180910390a150505050505050565b6120ac612428565b61ffff83811660008181526067602090815260408083209487168084529482529182902085905581519283528201929092529081018290527f9d5c7c0b934da8fefa9c7760c98383778a12dfbfc0c3b3106518f43fb9508ac09060600161131c565b6001600160a01b03918216600090815260d86020908152604080832093909416825291909152205460ff1690565b612144612428565b61ffff83166000908152606660205260409020612162908383613dd5565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab83838360405161131c93929190614a3f565b600080600086866040516020016121ae929190614d20565b60408051601f198184030181529082905260655463040a7bb160e41b83529092506001600160a01b0316906340a7bb10906121f5908b90309086908b908b90600401614d45565b604080518083038186803b15801561220c57600080fd5b505afa158015612220573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122449190614d99565b92509250509550959350505050565b61225b612428565b6001600160a01b0381166122c05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b7e565b61194281612b2b565b606554604051633d7b2f6f60e21b815261ffff808716600483015285166024820152306044820152606481018390526060916001600160a01b03169063f5ecbdbc9060840160006040518083038186803b15801561232657600080fd5b505afa15801561233a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526123629190810190614dbd565b95945050505050565b3390565b6000806123d25a60966366ad5c8a60e01b898989896040516024016123979493929190614df1565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915230929190612f0d565b9150915081611449576114498686868685612f97565b60006001600160e01b031982166380ac58cd60e01b148061241957506001600160e01b03198216635b5e139f60e01b145b80610d585750610d5882613025565b6033546001600160a01b031633146115cc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b7e565b61248b81612b7d565b6119425760405162461bcd60e51b8152600401610b7e90614aab565b600081815260d76020526040902080546001600160a01b0319166001600160a01b03841690811790915581906124dc82611340565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061252183611340565b9050806001600160a01b0316846001600160a01b031614806125485750612548818561210e565b806110625750836001600160a01b031661256184610e5d565b6001600160a01b031614949350505050565b826001600160a01b031661258682611340565b6001600160a01b0316146125ac5760405162461bcd60e51b8152600401610b7e90614e2f565b6001600160a01b03821661260e5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610b7e565b826001600160a01b031661262182611340565b6001600160a01b0316146126475760405162461bcd60e51b8152600401610b7e90614e2f565b600081815260d76020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260d6855283862080546000190190559087168086528386208054600101905586865260d590945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061271157612711614e74565b602090810291909101015292915050565b6001600160a01b03163b151590565b60008451116127785760405162461bcd60e51b8152602060048201526013602482015272746f6b656e4964735b5d20697320656d70747960681b6044820152606401610b7e565b83516001148061279c575061ffff8616600090815260d06020526040902054845111155b6127f35760405162461bcd60e51b815260206004820152602260248201527f62617463682073697a65206578636565647320647374206261746368206c696d6044820152611a5d60f21b6064820152608401610b7e565b60005b84518110156128365761282488888888858151811061281757612817614e74565b602002602001015161305a565b8061282e81614e8a565b9150506127f6565b506000858560405160200161284c929190614d20565b604051602081830303815290604052905061289187600184885160d160008d61ffff1661ffff1681526020019081526020016000205461288c9190614ea5565b61311d565b61289f8782868686346131f2565b856040516128ad9190614ec4565b6040518091039020886001600160a01b03168861ffff167fe1b87c47fdeb4f9cbadbca9df3af7aba453bb6e501075d0440d88125b711522a886040516128f39190614ee0565b60405180910390a45050505050505050565b6000808280602001905181019061291c9190614b3a565b60148201519193509150600061293488838386612bf4565b90508251811015612a085784516020808701919091206040805160808101825261ffff808d1682526001600160a01b03808816838701908152838501888152600160608601818152600089815260d2909a529887902095518654935190941662010000026001600160b01b03199093169390941692909217178355519082015592516002909301805493151560ff199094169390931790925590517f10e0b70d256bccc84b7027506978bd8b68984a870788b93b479def144c839ad7906129fe9083908990614ef3565b60405180910390a1505b816001600160a01b031687604051612a209190614ec4565b60405180910390208961ffff167f5b821db8a46f8ecbe1941ba2f51cfeea9643268b56631f70d45e2a745d990265866040516128f39190614ee0565b600054610100900460ff1615808015612a7c5750600054600160ff909116105b80612a9d5750612a8b30612722565b158015612a9d575060005460ff166001145b612ab95760405162461bcd60e51b8152600401610b7e90614a5d565b6000805460ff191660011790558015612adc576000805461ff0019166101001790555b612ae6858561337c565b612af083836133ad565b8015610e56576000805461ff001916905560405160018152600080516020615183833981519152906020015b60405180910390a15050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600090815260d560205260409020546001600160a01b0316151590565b6002609d541415612bed5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b7e565b6002609d55565b6000825b82518110156123625760cf545a1015612c1057612362565b612c348686858481518110612c2757612c27614e74565b602002602001015161345b565b80612c3e81614e8a565b915050612bf8565b606081612c5481601f614f0c565b1015612c935760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610b7e565b612c9d8284614f0c565b84511015612ce15760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606401610b7e565b606082158015612d005760405191506000825260208201604052612d4a565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015612d39578051835260209283019201612d21565b5050858452601f01601f1916604052505b50949350505050565b816001600160a01b0316836001600160a01b03161415612db15760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b6044820152606401610b7e565b6001600160a01b03838116600081815260d86020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b612e29848484612573565b612e35848484846135c5565b611ca35760405162461bcd60e51b8152600401610b7e90614f24565b606060405180606001604052806036815260200161514d60369139905090565b60606000612e7e836136d6565b60010190506000816001600160401b03811115612e9d57612e9d6140a1565b6040519080825280601f01601f191660200182016040528015612ec7576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084612f0057612f05565b612ed1565b509392505050565b6000606060008060008661ffff166001600160401b03811115612f3257612f326140a1565b6040519080825280601f01601f191660200182016040528015612f5c576020820181803683370190505b50905060008087516020890160008d8df191503d925086831115612f7e578692505b828152826000602083013e909890975095505050505050565b8180519060200120606a60008761ffff1661ffff16815260200190815260200160002085604051612fc89190614ec4565b9081526040805191829003602090810183206001600160401b0388166000908152915220919091557fe183f33de2837795525b4792ca4cd60535bd77c53b7e7030060bfcf5734d6b0c90612b1c9087908790879087908790614f76565b60006001600160e01b031982166322bac5d960e01b1480610d5857506301ffc9a760e01b6001600160e01b0319831614610d58565b610137546001600160a01b03161561311157610137546001600160a01b0316806342842e0e3330856040518463ffffffff1660e01b81526004016130a093929190614fc8565b600060405180830381600087803b1580156130ba57600080fd5b505af11580156130ce573d6000803e3d6000fd5b505050506130db82612b7d565b6130ee576130e930836137ae565b61310b565b306130f883611340565b6001600160a01b03161461310b57600080fd5b50611ca3565b611ca3848484846137c8565b6000613128836138b3565b61ffff808716600090815260676020908152604080832093891683529290522054909150806131995760405162461bcd60e51b815260206004820152601a60248201527f4c7a4170703a206d696e4761734c696d6974206e6f74207365740000000000006044820152606401610b7e565b6131a38382614f0c565b8210156114495760405162461bcd60e51b815260206004820152601b60248201527f4c7a4170703a20676173206c696d697420697320746f6f206c6f7700000000006044820152606401610b7e565b61ffff8616600090815260666020526040812080546132109061493a565b80601f016020809104026020016040519081016040528092919081815260200182805461323c9061493a565b80156132895780601f1061325e57610100808354040283529160200191613289565b820191906000526020600020905b81548152906001019060200180831161326c57829003601f168201915b505050505090508051600014156132fb5760405162461bcd60e51b815260206004820152603060248201527f4c7a4170703a2064657374696e6174696f6e20636861696e206973206e6f742060448201526f61207472757374656420736f7572636560801b6064820152608401610b7e565b61330687875161390f565b60655460405162c5803160e81b81526001600160a01b039091169063c5803100908490613341908b9086908c908c908c908c90600401614fec565b6000604051808303818588803b15801561335a57600080fd5b505af115801561336e573d6000803e3d6000fd5b505050505050505050505050565b600054610100900460ff166133a35760405162461bcd60e51b8152600401610b7e90615053565b611b2d828261397d565b600054610100900460ff16158080156133cd5750600054600160ff909116105b806133ee57506133dc30612722565b1580156133ee575060005460ff166001145b61340a5760405162461bcd60e51b8152600401610b7e90614a5d565b6000805460ff19166001179055801561342d576000805461ff0019166101001790555b6000831161344d5760405162461bcd60e51b8152600401610b7e90614985565b60cf8390556112f0826139cb565b610137546001600160a01b0316156135ba57610137546040516331a9108f60e11b8152600481018390526001600160a01b039091169030908290636352211e9060240160206040518083038186803b1580156134b657600080fd5b505afa1580156134ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134ee919061509e565b6001600160a01b0316146135355760405162461bcd60e51b815260206004820152600e60248201526d31b7b63630ba32b930b61032b93960911b6044820152606401610b7e565b3061353f83611340565b6001600160a01b03161461355257600080fd5b604051632142170760e11b81526001600160a01b038216906342842e0e9061358290309087908790600401614fc8565b600060405180830381600087803b15801561359c57600080fd5b505af11580156135b0573d6000803e3d6000fd5b5050505050505050565b610f95838383613a84565b60006135d9846001600160a01b0316612722565b156136ce57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906136109033908990889088906004016150bb565b602060405180830381600087803b15801561362a57600080fd5b505af192505050801561365a575060408051601f3d908101601f19168201909252613657918101906150f8565b60015b6136b4573d808015613688576040519150601f19603f3d011682016040523d82523d6000602084013e61368d565b606091505b5080516136ac5760405162461bcd60e51b8152600401610b7e90614f24565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611062565b506001611062565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106137155772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310613741576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061375f57662386f26fc10000830492506010015b6305f5e1008310613777576305f5e100830492506008015b612710831061378b57612710830492506004015b6064831061379d576064830492506002015b600a8310610d585760010192915050565b611b2d828260405180602001604052806000815250613ae4565b6137d13361106f565b6138345760405162461bcd60e51b815260206004820152602e60248201527f4f4e46543732313a2073656e642063616c6c6572206973206e6f74206f776e6560448201526d1c881b9bdc88185c1c1c9bdd995960921b6064820152608401610b7e565b836001600160a01b031661384782611340565b6001600160a01b0316146138a85760405162461bcd60e51b815260206004820152602260248201527f4f4e46543732313a2073656e642066726f6d20696e636f7272656374206f776e60448201526132b960f11b6064820152608401610b7e565b611ca3843083612573565b60006022825110156139075760405162461bcd60e51b815260206004820152601c60248201527f4c7a4170703a20696e76616c69642061646170746572506172616d73000000006044820152606401610b7e565b506022015190565b61ffff82166000908152606860205260409020548061392d57506127105b80821115610f955760405162461bcd60e51b815260206004820181905260248201527f4c7a4170703a207061796c6f61642073697a6520697320746f6f206c617267656044820152606401610b7e565b600054610100900460ff166139a45760405162461bcd60e51b8152600401610b7e90615053565b81516139b79060d3906020850190613d51565b508051610f959060d4906020840190613d51565b600054610100900460ff16158080156139eb5750600054600160ff909116105b80613a0c57506139fa30612722565b158015613a0c575060005460ff166001145b613a285760405162461bcd60e51b8152600401610b7e90614a5d565b6000805460ff191660011790558015613a4b576000805461ff0019166101001790555b613a5482613b17565b8015611b2d576000805461ff001916905560405160018152600080516020615183833981519152906020016119ff565b613a8d81612b7d565b1580613ab95750613a9d81612b7d565b8015613ab9575030613aae82611340565b6001600160a01b0316145b613ac257600080fd5b613acb81612b7d565b613ad957610f9582826137ae565b610f95308383612573565b613aee8383613bea565b613afb60008484846135c5565b610f955760405162461bcd60e51b8152600401610b7e90614f24565b600054610100900460ff1615808015613b375750600054600160ff909116105b80613b585750613b4630612722565b158015613b58575060005460ff166001145b613b745760405162461bcd60e51b8152600401610b7e90614a5d565b6000805460ff191660011790558015613b97576000805461ff0019166101001790555b613b9f613cf7565b606580546001600160a01b0319166001600160a01b0384161790558015611b2d576000805461ff001916905560405160018152600080516020615183833981519152906020016119ff565b6001600160a01b038216613c405760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610b7e565b613c4981612b7d565b15613c665760405162461bcd60e51b8152600401610b7e90615115565b613c6f81612b7d565b15613c8c5760405162461bcd60e51b8152600401610b7e90615115565b6001600160a01b038216600081815260d6602090815260408083208054600101905584835260d590915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600054610100900460ff16613d1e5760405162461bcd60e51b8152600401610b7e90615053565b6115cc600054610100900460ff16613d485760405162461bcd60e51b8152600401610b7e90615053565b6115cc33612b2b565b828054613d5d9061493a565b90600052602060002090601f016020900481019282613d7f5760008555613dc5565b82601f10613d9857805160ff1916838001178555613dc5565b82800160010185558215613dc5579182015b82811115613dc5578251825591602001919060010190613daa565b50613dd1929150613e49565b5090565b828054613de19061493a565b90600052602060002090601f016020900481019282613e035760008555613dc5565b82601f10613e1c5782800160ff19823516178555613dc5565b82800160010185558215613dc5579182015b82811115613dc5578235825591602001919060010190613e2e565b5b80821115613dd15760008155600101613e4a565b803561ffff81168114613e7057600080fd5b919050565b60008083601f840112613e8757600080fd5b5081356001600160401b03811115613e9e57600080fd5b602083019150836020828501011115613eb657600080fd5b9250929050565b80356001600160401b0381168114613e7057600080fd5b60008060008060008060808789031215613eed57600080fd5b613ef687613e5e565b955060208701356001600160401b0380821115613f1257600080fd5b613f1e8a838b01613e75565b9097509550859150613f3260408a01613ebd565b94506060890135915080821115613f4857600080fd5b50613f5589828a01613e75565b979a9699509497509295939492505050565b6001600160e01b03198116811461194257600080fd5b600060208284031215613f8f57600080fd5b8135611b1b81613f67565b60005b83811015613fb5578181015183820152602001613f9d565b83811115611ca35750506000910152565b60008151808452613fde816020860160208601613f9a565b601f01601f19169290920160200192915050565b602081526000611b1b6020830184613fc6565b60006020828403121561401757600080fd5b611b1b82613e5e565b60006020828403121561403257600080fd5b5035919050565b6001600160a01b038116811461194257600080fd5b8035613e7081614039565b6000806040838503121561406c57600080fd5b823561407781614039565b946020939093013593505050565b6000806040838503121561409857600080fd5b61407783613e5e565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156140df576140df6140a1565b604052919050565b60006001600160401b03821115614100576141006140a1565b50601f01601f191660200190565b600082601f83011261411f57600080fd5b813561413261412d826140e7565b6140b7565b81815284602083860101111561414757600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561417a57600080fd5b843561418581614039565b9350602085013561419581614039565b92506040850135915060608501356001600160401b038111156141b757600080fd5b6141c38782880161410e565b91505092959194509250565b6000806000606084860312156141e457600080fd5b83356141ef81614039565b925060208401356141ff81614039565b929592945050506040919091013590565b80358015158114613e7057600080fd5b600080600080600060a0868803121561423857600080fd5b61424186613e5e565b945060208601356001600160401b038082111561425d57600080fd5b61426989838a0161410e565b95506040880135945061427e60608901614210565b9350608088013591508082111561429457600080fd5b506142a18882890161410e565b9150509295509295909350565b6000806000604084860312156142c357600080fd5b6142cc84613e5e565b925060208401356001600160401b038111156142e757600080fd5b6142f386828701613e75565b9497909650939450505050565b6000806040838503121561431357600080fd5b823561431e81614039565b9150602083013561432e81614039565b809150509250929050565b600080600080600080600060e0888a03121561435457600080fd5b873561435f81614039565b965061436d60208901613e5e565b955060408801356001600160401b038082111561438957600080fd5b6143958b838c0161410e565b965060608a0135955060808a013591506143ae82614039565b90935060a0890135906143c082614039565b90925060c089013590808211156143d657600080fd5b506143e38a828b0161410e565b91505092959891949750929550565b60008060006060848603121561440757600080fd5b61441084613e5e565b925060208401356001600160401b0381111561442b57600080fd5b6144378682870161410e565b92505061444660408501613ebd565b90509250925092565b600080600080600060a0868803121561446757600080fd5b85356001600160401b038082111561447e57600080fd5b61448a89838a0161410e565b965060208801359150808211156144a057600080fd5b506144ad8882890161410e565b94505060408601356144be81614039565b92506060860135915060808601356144d581614039565b809150509295509295909350565b6000602082840312156144f557600080fd5b8135611b1b81614039565b6000806000806060858703121561451657600080fd5b8435935061452660208601613e5e565b925060408501356001600160401b0381111561454157600080fd5b61454d87828801613e75565b95989497509550505050565b6000806040838503121561456c57600080fd5b61457583613e5e565b915061458360208401613e5e565b90509250929050565b60006020828403121561459e57600080fd5b81356001600160401b038111156145b457600080fd5b6110628482850161410e565b600080604083850312156145d357600080fd5b82356145de81614039565b915061458360208401614210565b60008060008060006060868803121561460457600080fd5b85356001600160401b038082111561461b57600080fd5b818801915088601f83011261462f57600080fd5b81358181111561463e57600080fd5b8960208260051b850101111561465357600080fd5b6020830197508096505061466960208901613e5e565b9450604088013591508082111561467f57600080fd5b5061468c88828901613e75565b969995985093965092949392505050565b60006001600160401b038211156146b6576146b66140a1565b5060051b60200190565b600082601f8301126146d157600080fd5b813560206146e161412d8361469d565b82815260059290921b8401810191818101908684111561470057600080fd5b8286015b8481101561471b5780358352918301918301614704565b509695505050505050565b600080600080600080600060e0888a03121561474157600080fd5b873561474c81614039565b965061475a60208901613e5e565b955060408801356001600160401b038082111561477657600080fd5b6147828b838c0161410e565b965060608a013591508082111561479857600080fd5b6147a48b838c016146c0565b955060808a013591506147b682614039565b8194506147c560a08b0161404e565b935060c08a01359150808211156143d657600080fd5b6000806000806000608086880312156147f357600080fd5b6147fc86613e5e565b945061480a60208701613e5e565b93506040860135925060608601356001600160401b0381111561482c57600080fd5b61468c88828901613e75565b60008060006060848603121561484d57600080fd5b61485684613e5e565b925061486460208501613e5e565b9150604084013590509250925092565b600080600080600060a0868803121561488c57600080fd5b61489586613e5e565b945060208601356001600160401b03808211156148b157600080fd5b6148bd89838a0161410e565b955060408801359150808211156148d357600080fd5b6148df89838a016146c0565b945061427e60608901614210565b6000806000806080858703121561490357600080fd5b61490c85613e5e565b935061491a60208601613e5e565b9250604085013561492a81614039565b9396929550929360600135925050565b600181811c9082168061494e57607f821691505b6020821081141561496f57634e487b7160e01b600052602260045260246000fd5b50919050565b8183823760009101908152919050565b60208082526024908201527f6d696e476173546f5472616e73666572416e6453746f7265206d7573742062656040820152630203e20360e41b606082015260800190565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b61ffff84168152604060208201526000612362604083018486614a16565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b602080825260189082015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604082015260600190565b60609190911b6001600160601b031916815260140190565b600082601f830112614b0657600080fd5b8151614b1461412d826140e7565b818152846020838601011115614b2957600080fd5b611062826020830160208701613f9a565b60008060408385031215614b4d57600080fd5b82516001600160401b0380821115614b6457600080fd5b614b7086838701614af5565b9350602091508185015181811115614b8757600080fd5b85019050601f81018613614b9a57600080fd5b8051614ba861412d8261469d565b81815260059190911b82018301908381019088831115614bc757600080fd5b928401925b82841015614be557835182529284019290840190614bcc565b80955050505050509250929050565b634e487b7160e01b600052601160045260246000fd5b600082821015614c1c57614c1c614bf4565b500390565b8284823760609190911b6001600160601b0319169101908152601401919050565b60008351614c54818460208801613f9a565b835190830190614c68818360208801613f9a565b01949350505050565b600061ffff808816835280871660208401525084604083015260806060830152614c9f608083018486614a16565b979650505050505050565b61ffff86168152608060208201526000614cc8608083018688614a16565b6001600160401b0394909416604083015250606001529392505050565b600081518084526020808501945080840160005b83811015614d1557815187529582019590820190600101614cf9565b509495945050505050565b604081526000614d336040830185613fc6565b82810360208401526123628185614ce5565b61ffff861681526001600160a01b038516602082015260a060408201819052600090614d7390830186613fc6565b84151560608401528281036080840152614d8d8185613fc6565b98975050505050505050565b60008060408385031215614dac57600080fd5b505080516020909101519092909150565b600060208284031215614dcf57600080fd5b81516001600160401b03811115614de557600080fd5b61106284828501614af5565b61ffff85168152608060208201526000614e0e6080830186613fc6565b6001600160401b03851660408401528281036060840152614c9f8185613fc6565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000600019821415614e9e57614e9e614bf4565b5060010190565b6000816000190483118215151615614ebf57614ebf614bf4565b500290565b60008251614ed6818460208701613f9a565b9190910192915050565b602081526000611b1b6020830184614ce5565b8281526040602082015260006110626040830184613fc6565b60008219821115614f1f57614f1f614bf4565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b61ffff8616815260a060208201526000614f9360a0830187613fc6565b6001600160401b03861660408401528281036060840152614fb48186613fc6565b90508281036080840152614d8d8185613fc6565b6001600160a01b039384168152919092166020820152604081019190915260600190565b61ffff8716815260c06020820152600061500960c0830188613fc6565b828103604084015261501b8188613fc6565b6001600160a01b0387811660608601528616608085015283810360a085015290506150468185613fc6565b9998505050505050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000602082840312156150b057600080fd5b8151611b1b81614039565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906150ee90830184613fc6565b9695505050505050565b60006020828403121561510a57600080fd5b8151611b1b81613f67565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060408201526060019056fe697066733a2f2f516d65536a53696e4870506e6d586d73704d6a776958794e367a533445397a63636172694752336a7863615774712f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498a26469706673582212201a023999bd91439d44c4b88a769708391bbe8860a4225e60842baeab34c96eaf64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106103005760003560e01c80637f81be6911610191578063b88d4fde116100e2578063d8dfeb4511610090578063d8dfeb4514610a11578063df2a5b3b14610a32578063e985e9c514610a52578063eb8d72b714610a72578063f235364114610a92578063f2fde38b14610ab2578063f5ecbdbc14610ad2578063fa25f9b614610af257600080fd5b8063b88d4fde14610948578063baf3292d14610968578063c446183414610988578063c87b56dd1461099e578063cbed8b9c146109be578063d12473a5146109de578063d1deba1f146109fe57600080fd5b80639f38369a1161013f5780639f38369a1461087a578063a22cb4651461089a578063a6c3d165146108ba578063a8f40de5146108da578063ab3ffb93146108ed578063af3fb21c14610900578063b353aaa71461092857600080fd5b80637f81be691461078f5780638cfd8f5c146107af5780638da5cb5b146107e75780638ffa1f2a14610805578063950c8a741461082557806395d89b41146108455780639ea5d6b11461085a57600080fd5b80633f1f4fa4116102565780635b8c41e6116102045780635b8c41e6146106785780636352211e146106c757806366ad5c8a146106e75780636d22b4e01461070757806370a0823114610727578063715018a6146107475780637533d7881461075c5780637f68e5341461077c57600080fd5b80633f1f4fa41461058757806342842e0e146105c257806342d65a8d146105e25780634828819014610602578063485cc955146106185780634ac3f4ff14610638578063519056361461066557600080fd5b80630df37483116102b35780630df374831461041657806310ddb13714610436578063150b7a021461045657806322a3ecf91461048f57806323b872dd146105125780632a205e3d146105325780633d8b38f61461056757600080fd5b80621d35671461030557806301ffc9a71461032757806306fdde031461035c57806307e0db171461037e578063081812fc1461039e578063095ea7b3146103d65780630b4cad4c146103f6575b600080fd5b34801561031157600080fd5b50610325610320366004613ed4565b610b1f565b005b34801561033357600080fd5b50610347610342366004613f7d565b610d3b565b60405190151581526020015b60405180910390f35b34801561036857600080fd5b50610371610d5e565b6040516103539190613ff2565b34801561038a57600080fd5b50610325610399366004614005565b610df0565b3480156103aa57600080fd5b506103be6103b9366004614020565b610e5d565b6040516001600160a01b039091168152602001610353565b3480156103e257600080fd5b506103256103f1366004614059565b610e84565b34801561040257600080fd5b50610325610411366004614020565b610f9a565b34801561042257600080fd5b50610325610431366004614085565b610ffe565b34801561044257600080fd5b50610325610451366004614005565b61101d565b34801561046257600080fd5b50610476610471366004614164565b611059565b6040516001600160e01b03199091168152602001610353565b34801561049b57600080fd5b506104e36104aa366004614020565b60d26020526000908152604090208054600182015460029092015461ffff821692620100009092046001600160a01b0316919060ff1684565b6040805161ffff90951685526001600160a01b0390931660208501529183015215156060820152608001610353565b34801561051e57600080fd5b5061032561052d3660046141cf565b61106a565b34801561053e57600080fd5b5061055261054d366004614220565b61109c565b60408051928352602083019190915201610353565b34801561057357600080fd5b506103476105823660046142ae565b6110c2565b34801561059357600080fd5b506105b46105a2366004614005565b60686020526000908152604090205481565b604051908152602001610353565b3480156105ce57600080fd5b506103256105dd3660046141cf565b61118e565b3480156105ee57600080fd5b506103256105fd3660046142ae565b6111a9565b34801561060e57600080fd5b506105b460cf5481565b34801561062457600080fd5b50610325610633366004614300565b611213565b34801561064457600080fd5b506105b4610653366004614005565b60d06020526000908152604090205481565b610325610673366004614339565b611329565b34801561068457600080fd5b506105b46106933660046143f2565b606a602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b3480156106d357600080fd5b506103be6106e2366004614020565b611340565b3480156106f357600080fd5b50610325610702366004613ed4565b611375565b34801561071357600080fd5b5061032561072236600461444f565b611451565b34801561073357600080fd5b506105b46107423660046144e3565b611534565b34801561075357600080fd5b506103256115ba565b34801561076857600080fd5b50610371610777366004614005565b6115ce565b61032561078a366004614500565b611668565b34801561079b57600080fd5b506103be6107aa366004614020565b6116d8565b3480156107bb57600080fd5b506105b46107ca366004614559565b606760209081526000928352604080842090915290825290205481565b3480156107f357600080fd5b506033546001600160a01b03166103be565b34801561081157600080fd5b5061032561082036600461458c565b6116f9565b34801561083157600080fd5b506069546103be906001600160a01b031681565b34801561085157600080fd5b50610371611945565b34801561086657600080fd5b50610325610875366004614085565b611954565b34801561088657600080fd5b50610371610895366004614005565b611a0b565b3480156108a657600080fd5b506103256108b53660046145c0565b611b22565b3480156108c657600080fd5b506103256108d53660046142ae565b611b31565b6103256108e83660046145ec565b611bb7565b6103256108fb366004614726565b611c62565b34801561090c57600080fd5b50610915600181565b60405161ffff9091168152602001610353565b34801561093457600080fd5b506065546103be906001600160a01b031681565b34801561095457600080fd5b50610325610963366004614164565b611c71565b34801561097457600080fd5b506103256109833660046144e3565b611ca9565b34801561099457600080fd5b506105b461271081565b3480156109aa57600080fd5b506103716109b9366004614020565b611cff565b3480156109ca57600080fd5b506103256109d93660046147db565b611d65565b3480156109ea57600080fd5b506103256109f9366004614085565b611dde565b610325610a0c366004613ed4565b611e8e565b348015610a1d57600080fd5b50610137546103be906001600160a01b031681565b348015610a3e57600080fd5b50610325610a4d366004614838565b6120a4565b348015610a5e57600080fd5b50610347610a6d366004614300565b61210e565b348015610a7e57600080fd5b50610325610a8d3660046142ae565b61213c565b348015610a9e57600080fd5b50610552610aad366004614874565b612196565b348015610abe57600080fd5b50610325610acd3660046144e3565b612253565b348015610ade57600080fd5b50610371610aed3660046148ed565b6122c9565b348015610afe57600080fd5b506105b4610b0d366004614005565b60d16020526000908152604090205481565b6065546001600160a01b0316336001600160a01b031614610b875760405162461bcd60e51b815260206004820152601e60248201527f4c7a4170703a20696e76616c696420656e64706f696e742063616c6c6572000060448201526064015b60405180910390fd5b61ffff861660009081526066602052604081208054610ba59061493a565b80601f0160208091040260200160405190810160405280929190818152602001828054610bd19061493a565b8015610c1e5780601f10610bf357610100808354040283529160200191610c1e565b820191906000526020600020905b815481529060010190602001808311610c0157829003601f168201915b50505050509050805186869050148015610c39575060008151115b8015610c61575080516020820120604051610c579088908890614975565b6040518091039020145b610cbc5760405162461bcd60e51b815260206004820152602660248201527f4c7a4170703a20696e76616c696420736f757263652073656e64696e6720636f6044820152651b9d1c9858dd60d21b6064820152608401610b7e565b610d328787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8a018190048102820181019092528881528a93509150889088908190840183828082843760009201919091525061236f92505050565b50505050505050565b60006001600160e01b031982161580610d585750610d58826123e8565b92915050565b606060d38054610d6d9061493a565b80601f0160208091040260200160405190810160405280929190818152602001828054610d999061493a565b8015610de65780601f10610dbb57610100808354040283529160200191610de6565b820191906000526020600020905b815481529060010190602001808311610dc957829003601f168201915b5050505050905090565b610df8612428565b6065546040516307e0db1760e01b815261ffff831660048201526001600160a01b03909116906307e0db17906024015b600060405180830381600087803b158015610e4257600080fd5b505af1158015610e56573d6000803e3d6000fd5b5050505050565b6000610e6882612482565b50600090815260d760205260409020546001600160a01b031690565b6000610e8f82611340565b9050806001600160a01b0316836001600160a01b03161415610efd5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610b7e565b336001600160a01b0382161480610f195750610f19813361210e565b610f8b5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610b7e565b610f9583836124a7565b505050565b610fa2612428565b60008111610fc25760405162461bcd60e51b8152600401610b7e90614985565b60cf8190556040518181527ffebbc4f8bb9ec2313950c718d43123124b15778efda4c1f1d529de2995b4f34d906020015b60405180910390a150565b611006612428565b61ffff909116600090815260686020526040902055565b611025612428565b6065546040516310ddb13760e01b815261ffff831660048201526001600160a01b03909116906310ddb13790602401610e28565b630a85bd0160e11b5b949350505050565b611075335b82612515565b6110915760405162461bcd60e51b8152600401610b7e906149c9565b610f95838383612573565b6000806110b487876110ad886126d7565b8787612196565b915091509550959350505050565b61ffff8316600090815260666020526040812080548291906110e39061493a565b80601f016020809104026020016040519081016040528092919081815260200182805461110f9061493a565b801561115c5780601f106111315761010080835404028352916020019161115c565b820191906000526020600020905b81548152906001019060200180831161113f57829003601f168201915b505050505090508383604051611173929190614975565b60405180910390208180519060200120149150509392505050565b610f9583838360405180602001604052806000815250611c71565b6111b1612428565b6065546040516342d65a8d60e01b81526001600160a01b03909116906342d65a8d906111e590869086908690600401614a3f565b600060405180830381600087803b1580156111ff57600080fd5b505af1158015610d32573d6000803e3d6000fd5b600054610100900460ff16158080156112335750600054600160ff909116105b80611254575061124230612722565b158015611254575060005460ff166001145b6112705760405162461bcd60e51b8152600401610b7e90614a5d565b6000805460ff191660011790558015611293576000805461ff0019166101001790555b6112f06040518060400160405280601681526020017526b7b1b5a7a137b932b220b832acb0b1b43a21b63ab160511b815250604051806040016040528060098152602001684d6f636b4f4241594360b81b81525085600186611451565b8015610f95576000805461ff001916905560405160018152600080516020615183833981519152906020015b60405180910390a1505050565b610d32878787611338886126d7565b878787612731565b600081815260d560205260408120546001600160a01b031680610d585760405162461bcd60e51b8152600401610b7e90614aab565b3330146113d35760405162461bcd60e51b815260206004820152602660248201527f4e6f6e626c6f636b696e674c7a4170703a2063616c6c6572206d7573742062656044820152650204c7a4170760d41b6064820152608401610b7e565b6114498686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f89018190048102820181019092528781528993509150879087908190840183828082843760009201919091525061290592505050565b505050505050565b600054610100900460ff16158080156114715750600054600160ff909116105b80611492575061148030612722565b158015611492575060005460ff166001145b6114ae5760405162461bcd60e51b8152600401610b7e90614a5d565b6000805460ff1916600117905580156114d1576000805461ff0019166101001790555b6114dd86868585612a5c565b61013780546001600160a01b0319166001600160a01b0386161790558015611449576000805461ff0019169055604051600181526000805160206151838339815191529060200160405180910390a1505050505050565b60006001600160a01b03821661159e5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610b7e565b506001600160a01b0316600090815260d6602052604090205490565b6115c2612428565b6115cc6000612b2b565b565b606660205260009081526040902080546115e79061493a565b80601f01602080910402602001604051908101604052809291908181526020018280546116139061493a565b80156116605780601f1061163557610100808354040283529160200191611660565b820191906000526020600020905b81548152906001019060200180831161164357829003601f168201915b505050505081565b60003360405160200161167b9190614add565b6040516020818303038152906040529050610e566116963390565b85838833600089898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061132992505050565b60006116e382612b7d565b156116f157610d5882611340565b506000919050565b611701612b9a565b8051602080830191909120600081815260d290925260409091206002015460ff166117625760405162461bcd60e51b81526020600482015260116024820152701b9bc818dc99591a5d1cc81cdd1bdc9959607a1b6044820152606401610b7e565b6000828060200190518101906117789190614b3a565b600084815260d26020526040812080546001909101549294509092506117b49161ffff8216916201000090046001600160a01b03169085612bf4565b600084815260d2602052604090206001015490915081116118295760405162461bcd60e51b815260206004820152602960248201527f6e6f7420656e6f7567682067617320746f2070726f6365737320637265646974604482015268103a3930b739b332b960b91b6064820152608401610b7e565b81518114156118a157600083815260d2602052604080822080546001600160b01b031916815560018101929092556002909101805460ff19169055517fd7be02b8dd0d27bd0517a9cb4d7469ce27df4313821ae5ec1ff69acc594ba233906118949085815260200190565b60405180910390a1611935565b60408051608081018252600085815260d26020818152848320805461ffff80821687526001600160a01b03620100008084048216868a019081529989018b8152600160608b01818152998f90529790965297519851169096026001600160b01b03199091169690951695909517939093178455915191830191909155516002909101805491151560ff199092169190911790555b5050506119426001609d55565b50565b606060d48054610d6d9061493a565b61195c612428565b600081116119b75760405162461bcd60e51b815260206004820152602260248201527f647374436861696e4964546f42617463684c696d6974206d757374206265203e604482015261020360f41b6064820152608401610b7e565b61ffff8216600081815260d06020908152604091829020849055815192835282018390527f7315f7654d594ead24a30160ed9ba2d23247f543016b918343591e93d7afdb6d91015b60405180910390a15050565b61ffff8116600090815260666020526040812080546060929190611a2e9061493a565b80601f0160208091040260200160405190810160405280929190818152602001828054611a5a9061493a565b8015611aa75780601f10611a7c57610100808354040283529160200191611aa7565b820191906000526020600020905b815481529060010190602001808311611a8a57829003601f168201915b50505050509050805160001415611b005760405162461bcd60e51b815260206004820152601d60248201527f4c7a4170703a206e6f20747275737465642070617468207265636f72640000006044820152606401610b7e565b611b1b600060148351611b139190614c0a565b839190612c46565b9392505050565b611b2d338383612d53565b5050565b611b39612428565b818130604051602001611b4e93929190614c21565b60408051601f1981840301815291815261ffff85166000908152606660209081529190208251611b8393919290910190613d51565b507f8c0400cfe2d1199b1a725c78960bcc2a344d869b80590d0f2bd005db15a572ce83838360405161131c93929190614a3f565b600033604051602001611bca9190614add565b6040516020818303038152906040529050611449611be53390565b8583898980806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611c24925061236b915050565b600089898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c6292505050565b610d3287878787878787612731565b611c7b3383612515565b611c975760405162461bcd60e51b8152600401610b7e906149c9565b611ca384848484612e1e565b50505050565b611cb1612428565b606980546001600160a01b0319166001600160a01b0383169081179091556040519081527f5db758e995a17ec1ad84bdef7e8c3293a0bd6179bcce400dff5d4c3d87db726b90602001610ff3565b6060611d0a82612482565b6000611d14612e51565b90506000815111611d345760405180602001604052806000815250611b1b565b80611d3e84612e71565b604051602001611d4f929190614c42565b6040516020818303038152906040529392505050565b611d6d612428565b6065546040516332fb62e760e21b81526001600160a01b039091169063cbed8b9c90611da59088908890889088908890600401614c71565b600060405180830381600087803b158015611dbf57600080fd5b505af1158015611dd3573d6000803e3d6000fd5b505050505050505050565b611de6612428565b60008111611e425760405162461bcd60e51b815260206004820152602360248201527f647374436861696e4964546f5472616e73666572476173206d7573742062652060448201526203e20360ec1b6064820152608401610b7e565b61ffff8216600081815260d16020908152604091829020849055815192835282018390527fc46df2983228ac2d9754e94a0d565e6671665dc8ad38602bc8e544f0685a29fb91016119ff565b61ffff86166000908152606a60205260408082209051611eb19088908890614975565b90815260408051602092819003830190206001600160401b03871660009081529252902054905080611f315760405162461bcd60e51b815260206004820152602360248201527f4e6f6e626c6f636b696e674c7a4170703a206e6f2073746f726564206d65737360448201526261676560e81b6064820152608401610b7e565b808383604051611f42929190614975565b604051809103902014611fa15760405162461bcd60e51b815260206004820152602160248201527f4e6f6e626c6f636b696e674c7a4170703a20696e76616c6964207061796c6f616044820152601960fa1b6064820152608401610b7e565b61ffff87166000908152606a60205260408082209051611fc49089908990614975565b90815260408051602092819003830181206001600160401b038916600090815290845282902093909355601f8801829004820283018201905286825261205c918991899089908190840183828082843760009201919091525050604080516020601f8a018190048102820181019092528881528a93509150889088908190840183828082843760009201919091525061290592505050565b7fc264d91f3adc5588250e1551f547752ca0cfa8f6b530d243b9f9f4cab10ea8e58787878785604051612093959493929190614caa565b60405180910390a150505050505050565b6120ac612428565b61ffff83811660008181526067602090815260408083209487168084529482529182902085905581519283528201929092529081018290527f9d5c7c0b934da8fefa9c7760c98383778a12dfbfc0c3b3106518f43fb9508ac09060600161131c565b6001600160a01b03918216600090815260d86020908152604080832093909416825291909152205460ff1690565b612144612428565b61ffff83166000908152606660205260409020612162908383613dd5565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab83838360405161131c93929190614a3f565b600080600086866040516020016121ae929190614d20565b60408051601f198184030181529082905260655463040a7bb160e41b83529092506001600160a01b0316906340a7bb10906121f5908b90309086908b908b90600401614d45565b604080518083038186803b15801561220c57600080fd5b505afa158015612220573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122449190614d99565b92509250509550959350505050565b61225b612428565b6001600160a01b0381166122c05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b7e565b61194281612b2b565b606554604051633d7b2f6f60e21b815261ffff808716600483015285166024820152306044820152606481018390526060916001600160a01b03169063f5ecbdbc9060840160006040518083038186803b15801561232657600080fd5b505afa15801561233a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526123629190810190614dbd565b95945050505050565b3390565b6000806123d25a60966366ad5c8a60e01b898989896040516024016123979493929190614df1565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915230929190612f0d565b9150915081611449576114498686868685612f97565b60006001600160e01b031982166380ac58cd60e01b148061241957506001600160e01b03198216635b5e139f60e01b145b80610d585750610d5882613025565b6033546001600160a01b031633146115cc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b7e565b61248b81612b7d565b6119425760405162461bcd60e51b8152600401610b7e90614aab565b600081815260d76020526040902080546001600160a01b0319166001600160a01b03841690811790915581906124dc82611340565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061252183611340565b9050806001600160a01b0316846001600160a01b031614806125485750612548818561210e565b806110625750836001600160a01b031661256184610e5d565b6001600160a01b031614949350505050565b826001600160a01b031661258682611340565b6001600160a01b0316146125ac5760405162461bcd60e51b8152600401610b7e90614e2f565b6001600160a01b03821661260e5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610b7e565b826001600160a01b031661262182611340565b6001600160a01b0316146126475760405162461bcd60e51b8152600401610b7e90614e2f565b600081815260d76020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260d6855283862080546000190190559087168086528386208054600101905586865260d590945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061271157612711614e74565b602090810291909101015292915050565b6001600160a01b03163b151590565b60008451116127785760405162461bcd60e51b8152602060048201526013602482015272746f6b656e4964735b5d20697320656d70747960681b6044820152606401610b7e565b83516001148061279c575061ffff8616600090815260d06020526040902054845111155b6127f35760405162461bcd60e51b815260206004820152602260248201527f62617463682073697a65206578636565647320647374206261746368206c696d6044820152611a5d60f21b6064820152608401610b7e565b60005b84518110156128365761282488888888858151811061281757612817614e74565b602002602001015161305a565b8061282e81614e8a565b9150506127f6565b506000858560405160200161284c929190614d20565b604051602081830303815290604052905061289187600184885160d160008d61ffff1661ffff1681526020019081526020016000205461288c9190614ea5565b61311d565b61289f8782868686346131f2565b856040516128ad9190614ec4565b6040518091039020886001600160a01b03168861ffff167fe1b87c47fdeb4f9cbadbca9df3af7aba453bb6e501075d0440d88125b711522a886040516128f39190614ee0565b60405180910390a45050505050505050565b6000808280602001905181019061291c9190614b3a565b60148201519193509150600061293488838386612bf4565b90508251811015612a085784516020808701919091206040805160808101825261ffff808d1682526001600160a01b03808816838701908152838501888152600160608601818152600089815260d2909a529887902095518654935190941662010000026001600160b01b03199093169390941692909217178355519082015592516002909301805493151560ff199094169390931790925590517f10e0b70d256bccc84b7027506978bd8b68984a870788b93b479def144c839ad7906129fe9083908990614ef3565b60405180910390a1505b816001600160a01b031687604051612a209190614ec4565b60405180910390208961ffff167f5b821db8a46f8ecbe1941ba2f51cfeea9643268b56631f70d45e2a745d990265866040516128f39190614ee0565b600054610100900460ff1615808015612a7c5750600054600160ff909116105b80612a9d5750612a8b30612722565b158015612a9d575060005460ff166001145b612ab95760405162461bcd60e51b8152600401610b7e90614a5d565b6000805460ff191660011790558015612adc576000805461ff0019166101001790555b612ae6858561337c565b612af083836133ad565b8015610e56576000805461ff001916905560405160018152600080516020615183833981519152906020015b60405180910390a15050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600090815260d560205260409020546001600160a01b0316151590565b6002609d541415612bed5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b7e565b6002609d55565b6000825b82518110156123625760cf545a1015612c1057612362565b612c348686858481518110612c2757612c27614e74565b602002602001015161345b565b80612c3e81614e8a565b915050612bf8565b606081612c5481601f614f0c565b1015612c935760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610b7e565b612c9d8284614f0c565b84511015612ce15760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606401610b7e565b606082158015612d005760405191506000825260208201604052612d4a565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015612d39578051835260209283019201612d21565b5050858452601f01601f1916604052505b50949350505050565b816001600160a01b0316836001600160a01b03161415612db15760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b6044820152606401610b7e565b6001600160a01b03838116600081815260d86020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b612e29848484612573565b612e35848484846135c5565b611ca35760405162461bcd60e51b8152600401610b7e90614f24565b606060405180606001604052806036815260200161514d60369139905090565b60606000612e7e836136d6565b60010190506000816001600160401b03811115612e9d57612e9d6140a1565b6040519080825280601f01601f191660200182016040528015612ec7576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084612f0057612f05565b612ed1565b509392505050565b6000606060008060008661ffff166001600160401b03811115612f3257612f326140a1565b6040519080825280601f01601f191660200182016040528015612f5c576020820181803683370190505b50905060008087516020890160008d8df191503d925086831115612f7e578692505b828152826000602083013e909890975095505050505050565b8180519060200120606a60008761ffff1661ffff16815260200190815260200160002085604051612fc89190614ec4565b9081526040805191829003602090810183206001600160401b0388166000908152915220919091557fe183f33de2837795525b4792ca4cd60535bd77c53b7e7030060bfcf5734d6b0c90612b1c9087908790879087908790614f76565b60006001600160e01b031982166322bac5d960e01b1480610d5857506301ffc9a760e01b6001600160e01b0319831614610d58565b610137546001600160a01b03161561311157610137546001600160a01b0316806342842e0e3330856040518463ffffffff1660e01b81526004016130a093929190614fc8565b600060405180830381600087803b1580156130ba57600080fd5b505af11580156130ce573d6000803e3d6000fd5b505050506130db82612b7d565b6130ee576130e930836137ae565b61310b565b306130f883611340565b6001600160a01b03161461310b57600080fd5b50611ca3565b611ca3848484846137c8565b6000613128836138b3565b61ffff808716600090815260676020908152604080832093891683529290522054909150806131995760405162461bcd60e51b815260206004820152601a60248201527f4c7a4170703a206d696e4761734c696d6974206e6f74207365740000000000006044820152606401610b7e565b6131a38382614f0c565b8210156114495760405162461bcd60e51b815260206004820152601b60248201527f4c7a4170703a20676173206c696d697420697320746f6f206c6f7700000000006044820152606401610b7e565b61ffff8616600090815260666020526040812080546132109061493a565b80601f016020809104026020016040519081016040528092919081815260200182805461323c9061493a565b80156132895780601f1061325e57610100808354040283529160200191613289565b820191906000526020600020905b81548152906001019060200180831161326c57829003601f168201915b505050505090508051600014156132fb5760405162461bcd60e51b815260206004820152603060248201527f4c7a4170703a2064657374696e6174696f6e20636861696e206973206e6f742060448201526f61207472757374656420736f7572636560801b6064820152608401610b7e565b61330687875161390f565b60655460405162c5803160e81b81526001600160a01b039091169063c5803100908490613341908b9086908c908c908c908c90600401614fec565b6000604051808303818588803b15801561335a57600080fd5b505af115801561336e573d6000803e3d6000fd5b505050505050505050505050565b600054610100900460ff166133a35760405162461bcd60e51b8152600401610b7e90615053565b611b2d828261397d565b600054610100900460ff16158080156133cd5750600054600160ff909116105b806133ee57506133dc30612722565b1580156133ee575060005460ff166001145b61340a5760405162461bcd60e51b8152600401610b7e90614a5d565b6000805460ff19166001179055801561342d576000805461ff0019166101001790555b6000831161344d5760405162461bcd60e51b8152600401610b7e90614985565b60cf8390556112f0826139cb565b610137546001600160a01b0316156135ba57610137546040516331a9108f60e11b8152600481018390526001600160a01b039091169030908290636352211e9060240160206040518083038186803b1580156134b657600080fd5b505afa1580156134ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134ee919061509e565b6001600160a01b0316146135355760405162461bcd60e51b815260206004820152600e60248201526d31b7b63630ba32b930b61032b93960911b6044820152606401610b7e565b3061353f83611340565b6001600160a01b03161461355257600080fd5b604051632142170760e11b81526001600160a01b038216906342842e0e9061358290309087908790600401614fc8565b600060405180830381600087803b15801561359c57600080fd5b505af11580156135b0573d6000803e3d6000fd5b5050505050505050565b610f95838383613a84565b60006135d9846001600160a01b0316612722565b156136ce57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906136109033908990889088906004016150bb565b602060405180830381600087803b15801561362a57600080fd5b505af192505050801561365a575060408051601f3d908101601f19168201909252613657918101906150f8565b60015b6136b4573d808015613688576040519150601f19603f3d011682016040523d82523d6000602084013e61368d565b606091505b5080516136ac5760405162461bcd60e51b8152600401610b7e90614f24565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611062565b506001611062565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106137155772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310613741576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061375f57662386f26fc10000830492506010015b6305f5e1008310613777576305f5e100830492506008015b612710831061378b57612710830492506004015b6064831061379d576064830492506002015b600a8310610d585760010192915050565b611b2d828260405180602001604052806000815250613ae4565b6137d13361106f565b6138345760405162461bcd60e51b815260206004820152602e60248201527f4f4e46543732313a2073656e642063616c6c6572206973206e6f74206f776e6560448201526d1c881b9bdc88185c1c1c9bdd995960921b6064820152608401610b7e565b836001600160a01b031661384782611340565b6001600160a01b0316146138a85760405162461bcd60e51b815260206004820152602260248201527f4f4e46543732313a2073656e642066726f6d20696e636f7272656374206f776e60448201526132b960f11b6064820152608401610b7e565b611ca3843083612573565b60006022825110156139075760405162461bcd60e51b815260206004820152601c60248201527f4c7a4170703a20696e76616c69642061646170746572506172616d73000000006044820152606401610b7e565b506022015190565b61ffff82166000908152606860205260409020548061392d57506127105b80821115610f955760405162461bcd60e51b815260206004820181905260248201527f4c7a4170703a207061796c6f61642073697a6520697320746f6f206c617267656044820152606401610b7e565b600054610100900460ff166139a45760405162461bcd60e51b8152600401610b7e90615053565b81516139b79060d3906020850190613d51565b508051610f959060d4906020840190613d51565b600054610100900460ff16158080156139eb5750600054600160ff909116105b80613a0c57506139fa30612722565b158015613a0c575060005460ff166001145b613a285760405162461bcd60e51b8152600401610b7e90614a5d565b6000805460ff191660011790558015613a4b576000805461ff0019166101001790555b613a5482613b17565b8015611b2d576000805461ff001916905560405160018152600080516020615183833981519152906020016119ff565b613a8d81612b7d565b1580613ab95750613a9d81612b7d565b8015613ab9575030613aae82611340565b6001600160a01b0316145b613ac257600080fd5b613acb81612b7d565b613ad957610f9582826137ae565b610f95308383612573565b613aee8383613bea565b613afb60008484846135c5565b610f955760405162461bcd60e51b8152600401610b7e90614f24565b600054610100900460ff1615808015613b375750600054600160ff909116105b80613b585750613b4630612722565b158015613b58575060005460ff166001145b613b745760405162461bcd60e51b8152600401610b7e90614a5d565b6000805460ff191660011790558015613b97576000805461ff0019166101001790555b613b9f613cf7565b606580546001600160a01b0319166001600160a01b0384161790558015611b2d576000805461ff001916905560405160018152600080516020615183833981519152906020016119ff565b6001600160a01b038216613c405760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610b7e565b613c4981612b7d565b15613c665760405162461bcd60e51b8152600401610b7e90615115565b613c6f81612b7d565b15613c8c5760405162461bcd60e51b8152600401610b7e90615115565b6001600160a01b038216600081815260d6602090815260408083208054600101905584835260d590915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600054610100900460ff16613d1e5760405162461bcd60e51b8152600401610b7e90615053565b6115cc600054610100900460ff16613d485760405162461bcd60e51b8152600401610b7e90615053565b6115cc33612b2b565b828054613d5d9061493a565b90600052602060002090601f016020900481019282613d7f5760008555613dc5565b82601f10613d9857805160ff1916838001178555613dc5565b82800160010185558215613dc5579182015b82811115613dc5578251825591602001919060010190613daa565b50613dd1929150613e49565b5090565b828054613de19061493a565b90600052602060002090601f016020900481019282613e035760008555613dc5565b82601f10613e1c5782800160ff19823516178555613dc5565b82800160010185558215613dc5579182015b82811115613dc5578235825591602001919060010190613e2e565b5b80821115613dd15760008155600101613e4a565b803561ffff81168114613e7057600080fd5b919050565b60008083601f840112613e8757600080fd5b5081356001600160401b03811115613e9e57600080fd5b602083019150836020828501011115613eb657600080fd5b9250929050565b80356001600160401b0381168114613e7057600080fd5b60008060008060008060808789031215613eed57600080fd5b613ef687613e5e565b955060208701356001600160401b0380821115613f1257600080fd5b613f1e8a838b01613e75565b9097509550859150613f3260408a01613ebd565b94506060890135915080821115613f4857600080fd5b50613f5589828a01613e75565b979a9699509497509295939492505050565b6001600160e01b03198116811461194257600080fd5b600060208284031215613f8f57600080fd5b8135611b1b81613f67565b60005b83811015613fb5578181015183820152602001613f9d565b83811115611ca35750506000910152565b60008151808452613fde816020860160208601613f9a565b601f01601f19169290920160200192915050565b602081526000611b1b6020830184613fc6565b60006020828403121561401757600080fd5b611b1b82613e5e565b60006020828403121561403257600080fd5b5035919050565b6001600160a01b038116811461194257600080fd5b8035613e7081614039565b6000806040838503121561406c57600080fd5b823561407781614039565b946020939093013593505050565b6000806040838503121561409857600080fd5b61407783613e5e565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156140df576140df6140a1565b604052919050565b60006001600160401b03821115614100576141006140a1565b50601f01601f191660200190565b600082601f83011261411f57600080fd5b813561413261412d826140e7565b6140b7565b81815284602083860101111561414757600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561417a57600080fd5b843561418581614039565b9350602085013561419581614039565b92506040850135915060608501356001600160401b038111156141b757600080fd5b6141c38782880161410e565b91505092959194509250565b6000806000606084860312156141e457600080fd5b83356141ef81614039565b925060208401356141ff81614039565b929592945050506040919091013590565b80358015158114613e7057600080fd5b600080600080600060a0868803121561423857600080fd5b61424186613e5e565b945060208601356001600160401b038082111561425d57600080fd5b61426989838a0161410e565b95506040880135945061427e60608901614210565b9350608088013591508082111561429457600080fd5b506142a18882890161410e565b9150509295509295909350565b6000806000604084860312156142c357600080fd5b6142cc84613e5e565b925060208401356001600160401b038111156142e757600080fd5b6142f386828701613e75565b9497909650939450505050565b6000806040838503121561431357600080fd5b823561431e81614039565b9150602083013561432e81614039565b809150509250929050565b600080600080600080600060e0888a03121561435457600080fd5b873561435f81614039565b965061436d60208901613e5e565b955060408801356001600160401b038082111561438957600080fd5b6143958b838c0161410e565b965060608a0135955060808a013591506143ae82614039565b90935060a0890135906143c082614039565b90925060c089013590808211156143d657600080fd5b506143e38a828b0161410e565b91505092959891949750929550565b60008060006060848603121561440757600080fd5b61441084613e5e565b925060208401356001600160401b0381111561442b57600080fd5b6144378682870161410e565b92505061444660408501613ebd565b90509250925092565b600080600080600060a0868803121561446757600080fd5b85356001600160401b038082111561447e57600080fd5b61448a89838a0161410e565b965060208801359150808211156144a057600080fd5b506144ad8882890161410e565b94505060408601356144be81614039565b92506060860135915060808601356144d581614039565b809150509295509295909350565b6000602082840312156144f557600080fd5b8135611b1b81614039565b6000806000806060858703121561451657600080fd5b8435935061452660208601613e5e565b925060408501356001600160401b0381111561454157600080fd5b61454d87828801613e75565b95989497509550505050565b6000806040838503121561456c57600080fd5b61457583613e5e565b915061458360208401613e5e565b90509250929050565b60006020828403121561459e57600080fd5b81356001600160401b038111156145b457600080fd5b6110628482850161410e565b600080604083850312156145d357600080fd5b82356145de81614039565b915061458360208401614210565b60008060008060006060868803121561460457600080fd5b85356001600160401b038082111561461b57600080fd5b818801915088601f83011261462f57600080fd5b81358181111561463e57600080fd5b8960208260051b850101111561465357600080fd5b6020830197508096505061466960208901613e5e565b9450604088013591508082111561467f57600080fd5b5061468c88828901613e75565b969995985093965092949392505050565b60006001600160401b038211156146b6576146b66140a1565b5060051b60200190565b600082601f8301126146d157600080fd5b813560206146e161412d8361469d565b82815260059290921b8401810191818101908684111561470057600080fd5b8286015b8481101561471b5780358352918301918301614704565b509695505050505050565b600080600080600080600060e0888a03121561474157600080fd5b873561474c81614039565b965061475a60208901613e5e565b955060408801356001600160401b038082111561477657600080fd5b6147828b838c0161410e565b965060608a013591508082111561479857600080fd5b6147a48b838c016146c0565b955060808a013591506147b682614039565b8194506147c560a08b0161404e565b935060c08a01359150808211156143d657600080fd5b6000806000806000608086880312156147f357600080fd5b6147fc86613e5e565b945061480a60208701613e5e565b93506040860135925060608601356001600160401b0381111561482c57600080fd5b61468c88828901613e75565b60008060006060848603121561484d57600080fd5b61485684613e5e565b925061486460208501613e5e565b9150604084013590509250925092565b600080600080600060a0868803121561488c57600080fd5b61489586613e5e565b945060208601356001600160401b03808211156148b157600080fd5b6148bd89838a0161410e565b955060408801359150808211156148d357600080fd5b6148df89838a016146c0565b945061427e60608901614210565b6000806000806080858703121561490357600080fd5b61490c85613e5e565b935061491a60208601613e5e565b9250604085013561492a81614039565b9396929550929360600135925050565b600181811c9082168061494e57607f821691505b6020821081141561496f57634e487b7160e01b600052602260045260246000fd5b50919050565b8183823760009101908152919050565b60208082526024908201527f6d696e476173546f5472616e73666572416e6453746f7265206d7573742062656040820152630203e20360e41b606082015260800190565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b61ffff84168152604060208201526000612362604083018486614a16565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b602080825260189082015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604082015260600190565b60609190911b6001600160601b031916815260140190565b600082601f830112614b0657600080fd5b8151614b1461412d826140e7565b818152846020838601011115614b2957600080fd5b611062826020830160208701613f9a565b60008060408385031215614b4d57600080fd5b82516001600160401b0380821115614b6457600080fd5b614b7086838701614af5565b9350602091508185015181811115614b8757600080fd5b85019050601f81018613614b9a57600080fd5b8051614ba861412d8261469d565b81815260059190911b82018301908381019088831115614bc757600080fd5b928401925b82841015614be557835182529284019290840190614bcc565b80955050505050509250929050565b634e487b7160e01b600052601160045260246000fd5b600082821015614c1c57614c1c614bf4565b500390565b8284823760609190911b6001600160601b0319169101908152601401919050565b60008351614c54818460208801613f9a565b835190830190614c68818360208801613f9a565b01949350505050565b600061ffff808816835280871660208401525084604083015260806060830152614c9f608083018486614a16565b979650505050505050565b61ffff86168152608060208201526000614cc8608083018688614a16565b6001600160401b0394909416604083015250606001529392505050565b600081518084526020808501945080840160005b83811015614d1557815187529582019590820190600101614cf9565b509495945050505050565b604081526000614d336040830185613fc6565b82810360208401526123628185614ce5565b61ffff861681526001600160a01b038516602082015260a060408201819052600090614d7390830186613fc6565b84151560608401528281036080840152614d8d8185613fc6565b98975050505050505050565b60008060408385031215614dac57600080fd5b505080516020909101519092909150565b600060208284031215614dcf57600080fd5b81516001600160401b03811115614de557600080fd5b61106284828501614af5565b61ffff85168152608060208201526000614e0e6080830186613fc6565b6001600160401b03851660408401528281036060840152614c9f8185613fc6565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000600019821415614e9e57614e9e614bf4565b5060010190565b6000816000190483118215151615614ebf57614ebf614bf4565b500290565b60008251614ed6818460208701613f9a565b9190910192915050565b602081526000611b1b6020830184614ce5565b8281526040602082015260006110626040830184613fc6565b60008219821115614f1f57614f1f614bf4565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b61ffff8616815260a060208201526000614f9360a0830187613fc6565b6001600160401b03861660408401528281036060840152614fb48186613fc6565b90508281036080840152614d8d8185613fc6565b6001600160a01b039384168152919092166020820152604081019190915260600190565b61ffff8716815260c06020820152600061500960c0830188613fc6565b828103604084015261501b8188613fc6565b6001600160a01b0387811660608601528616608085015283810360a085015290506150468185613fc6565b9998505050505050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000602082840312156150b057600080fd5b8151611b1b81614039565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906150ee90830184613fc6565b9695505050505050565b60006020828403121561510a57600080fd5b8151611b1b81613f67565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060408201526060019056fe697066733a2f2f516d65536a53696e4870506e6d586d73704d6a776958794e367a533445397a63636172694752336a7863615774712f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498a26469706673582212201a023999bd91439d44c4b88a769708391bbe8860a4225e60842baeab34c96eaf64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "estimateSendBatchFee(uint16,bytes,uint256[],bool,bytes)": {
        "details": "estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`) _dstChainId - L0 defined chain id to send tokens too _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain _tokenIds[] - token Ids to transfer _useZro - indicates to use zro to pay L0 fees _adapterParams - flexible bytes array to indicate messaging adapter services in L0"
      },
      "estimateSendFee(uint16,bytes,uint256,bool,bytes)": {
        "details": "estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`) _dstChainId - L0 defined chain id to send tokens too _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain _tokenId - token Id to transfer _useZro - indicates to use zro to pay L0 fees _adapterParams - flexible bytes array to indicate messaging adapter services in L0"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "sendBatchFrom(address,uint16,bytes,uint256[],address,address,bytes)": {
        "details": "send tokens `_tokenIds[]` to (`_dstChainId`, `_toAddress`) from `_from` `_toAddress` can be any size depending on the `dstChainId`. `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token) `_adapterParams` is a flexible bytes array to indicate messaging adapter services"
      },
      "sendFrom(address,uint16,bytes,uint256,address,address,bytes)": {
        "details": "send token `_tokenId` to (`_dstChainId`, `_toAddress`) from `_from` `_toAddress` can be any size depending on the `dstChainId`. `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token) `_adapterParams` is a flexible bytes array to indicate messaging adapter services"
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 139,
        "contract": "contracts/mocks/MockOBoredApeYachtClub.sol:MockOBoredApeYachtClub",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 142,
        "contract": "contracts/mocks/MockOBoredApeYachtClub.sol:MockOBoredApeYachtClub",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1928,
        "contract": "contracts/mocks/MockOBoredApeYachtClub.sol:MockOBoredApeYachtClub",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11,
        "contract": "contracts/mocks/MockOBoredApeYachtClub.sol:MockOBoredApeYachtClub",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 131,
        "contract": "contracts/mocks/MockOBoredApeYachtClub.sol:MockOBoredApeYachtClub",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4847,
        "contract": "contracts/mocks/MockOBoredApeYachtClub.sol:MockOBoredApeYachtClub",
        "label": "lzEndpoint",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(ILayerZeroEndpoint)5762"
      },
      {
        "astId": 4851,
        "contract": "contracts/mocks/MockOBoredApeYachtClub.sol:MockOBoredApeYachtClub",
        "label": "trustedRemoteLookup",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_uint16,t_bytes_storage)"
      },
      {
        "astId": 4857,
        "contract": "contracts/mocks/MockOBoredApeYachtClub.sol:MockOBoredApeYachtClub",
        "label": "minDstGasLookup",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint16,t_mapping(t_uint16,t_uint256))"
      },
      {
        "astId": 4861,
        "contract": "contracts/mocks/MockOBoredApeYachtClub.sol:MockOBoredApeYachtClub",
        "label": "payloadSizeLimitLookup",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_uint16,t_uint256)"
      },
      {
        "astId": 4863,
        "contract": "contracts/mocks/MockOBoredApeYachtClub.sol:MockOBoredApeYachtClub",
        "label": "precrime",
        "offset": 0,
        "slot": "105",
        "type": "t_address"
      },
      {
        "astId": 5402,
        "contract": "contracts/mocks/MockOBoredApeYachtClub.sol:MockOBoredApeYachtClub",
        "label": "failedMessages",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))"
      },
      {
        "astId": 2202,
        "contract": "contracts/mocks/MockOBoredApeYachtClub.sol:MockOBoredApeYachtClub",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 316,
        "contract": "contracts/mocks/MockOBoredApeYachtClub.sol:MockOBoredApeYachtClub",
        "label": "_status",
        "offset": 0,
        "slot": "157",
        "type": "t_uint256"
      },
      {
        "astId": 385,
        "contract": "contracts/mocks/MockOBoredApeYachtClub.sol:MockOBoredApeYachtClub",
        "label": "__gap",
        "offset": 0,
        "slot": "158",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5990,
        "contract": "contracts/mocks/MockOBoredApeYachtClub.sol:MockOBoredApeYachtClub",
        "label": "minGasToTransferAndStore",
        "offset": 0,
        "slot": "207",
        "type": "t_uint256"
      },
      {
        "astId": 5994,
        "contract": "contracts/mocks/MockOBoredApeYachtClub.sol:MockOBoredApeYachtClub",
        "label": "dstChainIdToBatchLimit",
        "offset": 0,
        "slot": "208",
        "type": "t_mapping(t_uint16,t_uint256)"
      },
      {
        "astId": 5998,
        "contract": "contracts/mocks/MockOBoredApeYachtClub.sol:MockOBoredApeYachtClub",
        "label": "dstChainIdToTransferGas",
        "offset": 0,
        "slot": "209",
        "type": "t_mapping(t_uint16,t_uint256)"
      },
      {
        "astId": 6003,
        "contract": "contracts/mocks/MockOBoredApeYachtClub.sol:MockOBoredApeYachtClub",
        "label": "storedCredits",
        "offset": 0,
        "slot": "210",
        "type": "t_mapping(t_bytes32,t_struct(StoredCredit)5988_storage)"
      },
      {
        "astId": 416,
        "contract": "contracts/mocks/MockOBoredApeYachtClub.sol:MockOBoredApeYachtClub",
        "label": "_name",
        "offset": 0,
        "slot": "211",
        "type": "t_string_storage"
      },
      {
        "astId": 418,
        "contract": "contracts/mocks/MockOBoredApeYachtClub.sol:MockOBoredApeYachtClub",
        "label": "_symbol",
        "offset": 0,
        "slot": "212",
        "type": "t_string_storage"
      },
      {
        "astId": 422,
        "contract": "contracts/mocks/MockOBoredApeYachtClub.sol:MockOBoredApeYachtClub",
        "label": "_owners",
        "offset": 0,
        "slot": "213",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 426,
        "contract": "contracts/mocks/MockOBoredApeYachtClub.sol:MockOBoredApeYachtClub",
        "label": "_balances",
        "offset": 0,
        "slot": "214",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 430,
        "contract": "contracts/mocks/MockOBoredApeYachtClub.sol:MockOBoredApeYachtClub",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "215",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 436,
        "contract": "contracts/mocks/MockOBoredApeYachtClub.sol:MockOBoredApeYachtClub",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "216",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1338,
        "contract": "contracts/mocks/MockOBoredApeYachtClub.sol:MockOBoredApeYachtClub",
        "label": "__gap",
        "offset": 0,
        "slot": "217",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 1547,
        "contract": "contracts/mocks/MockOBoredApeYachtClub.sol:MockOBoredApeYachtClub",
        "label": "__gap",
        "offset": 0,
        "slot": "261",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4126,
        "contract": "contracts/mocks/MockOBoredApeYachtClub.sol:MockOBoredApeYachtClub",
        "label": "collateral",
        "offset": 0,
        "slot": "311",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(ILayerZeroEndpoint)5762": {
        "encoding": "inplace",
        "label": "contract ILayerZeroEndpoint",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(StoredCredit)5988_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ONFT721Core.StoredCredit)",
        "numberOfBytes": "32",
        "value": "t_struct(StoredCredit)5988_storage"
      },
      "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => mapping(uint64 => bytes32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint64,t_bytes32)"
      },
      "t_mapping(t_uint16,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))"
      },
      "t_mapping(t_uint16,t_mapping(t_uint16,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(uint16 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_uint256)"
      },
      "t_mapping(t_uint16,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint64,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(StoredCredit)5988_storage": {
        "encoding": "inplace",
        "label": "struct ONFT721Core.StoredCredit",
        "members": [
          {
            "astId": 5981,
            "contract": "contracts/mocks/MockOBoredApeYachtClub.sol:MockOBoredApeYachtClub",
            "label": "srcChainId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 5983,
            "contract": "contracts/mocks/MockOBoredApeYachtClub.sol:MockOBoredApeYachtClub",
            "label": "toAddress",
            "offset": 2,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5985,
            "contract": "contracts/mocks/MockOBoredApeYachtClub.sol:MockOBoredApeYachtClub",
            "label": "index",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5987,
            "contract": "contracts/mocks/MockOBoredApeYachtClub.sol:MockOBoredApeYachtClub",
            "label": "creditsRemain",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}